info:
  contact:
    name: Project Repository
    url: https://github.com/leonhard-s/ps2-api-docs
  description: |
    ## Introduction

    The Daybreak Game Company Census API provides access to game and character data for the MMOFPS
    [PlanetSide 2](https://www.planetside2.com/home), allowing players to develop their own apps,
    stat trackers, websites, and community integrations.

    ### Disclaimer

    This documentation is written and maintained by thirdparty developers from the PlanetSide 2
    community and has no affiliation with Daybreak Game Company, Rogue Planet Games, or the
    PlanetSide 2 developer team. If you encounter any errors or have other feedback, please do
    consider [opening an issue](https://github.com/leonhard-s/ps2-api-docs/issues) or contributing
    to the project directly.

    ### Warranty

    Note that all game data and files made available by Daybreak Game Company are provided "AS IS"
    and come with absolutely no warranty. For legal details, please refer to the API's
    [warranty disclaimer](https://census.daybreakgames.com/#warranty) and the Census API [terms of
    service](https://census.daybreakgames.com#services-api-policy).

    Furthermore, the OpenAPI spec provided here is released without any warranty either, though its
    source code is made available without restriction at the repository link listed in the contact
    section of this API specification.

    ### Service IDs

    The Census API uses service IDs to monitor and identify API consumers. These IDs are free and
    can be requested via [this form](https://census.daybreakgames.com/#devSignup). The process is
    automatic and you should receive your service ID confirmation email within a few minutes to
    hours.

    Using the API without a service ID is possible and synonymous with using the default service ID of
    `s:example`. However, this service ID is rate-limited to 10 requests per minute and IP address,
    so it is highly recommended to apply for your own service IDs early on.

    ### Further Reading

    This documentation is intended to be a reference for the API endpoints, parameters, and JSON
    schemas. For a more general introduction to the Census API, examples, and more detailed
    information on the `c:join` system, please refer to one of the following resources:

      - [Census API Documentation](https://census.daybreakgames.com/): Official documentation by
        Daybreak Game Company
      - [PlanetSide 2 API Tracker](https://github.com/cooltrain7/Planetside-2-API-Tracker): A
        community-maintained issue tracker and developer resource
      - [Census API Primer](https://github.com/leonhard-s/auraxium/wiki/Census-API-Primer): A
        rewritten version of the official documentation with additional details and examples
      - [PS2 Query GUI](https://eating-coleslaw.github.io/ps2-visual-query/): A GUI web page for
        querying the Planetside 2 API
      - [Zone ID Tutorial](https://github.com/cooltrain7/Planetside-2-API-Tracker/wiki/Tutorial:-Zone-IDs):
        Introduction for working with dynamic zones, such as those spawned for Outfit Wars
      - [Sanctuary.Census](https://github.com/PS2Sanctuary/Sanctuary.Census): A community endpoint
        replicating and extending the Census ReST API

    ### Event Streaming Service

    The PlanetSide 2 API also provides a real-time event streaming service using the WebSocket
    protocol. This service is not covered by this documentation yet, but you can find more
    information at the following links:

      - [PS2 Event Streaming](https://census.daybreakgames.com/#what-is-websocket): Official
        documentation by Daybreak Game Company
      - [Nanite Systems ESS](https://github.com/nanite-systems/stream): A replacement endpoint for
        the ESS designed to provide more reliability
  license:
    name: Proprietary
    url: https://census.daybreakgames.com#services-api-policy
  termsOfService: https://census.daybreakgames.com#services-api-policy
  title: PlanetSide 2 API
  version: "0.6"
  x-logo:
    altText: Census API Docs Logo
    url: https://raw.githubusercontent.com/leonhard-s/ps2-api-docs/main/docs/logo-redoc.png
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
openapi: 3.1.0
paths:
  /count/{game}/{collection}:
    get:
      description: >
        Lists the number of entries in the given collection.

        This endpoint can be used to determine an appropriate pagination strategy based on the size
        of the result list, but it is especially useful for API introspection as it still supports
        query strings, including search modifiers and certain query commands.

        For example, the `weapon` collection may be queried with `c:has=heat_capacity` to get the
        number of heat-based weapons. Similarly, comparing the `c:has=<field>` count of a
        collection with the total can be used to guess whether a field is optional or used.

        Client code should be ready to receive negative values for this endpoint, which is used as
        the error state for this endpoint, rather than the explicit error payloads sent for the
        `/get/` query verb.
      operationId: count_generic
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/collectionParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/count/{game}/{collection}.yaml
          description: OK
        4XX:
          description: >
            Returns `{"count": -1}` on error
      summary: /count/{game}/{collection}
      tags:
        - Game-Agnostic Endpoints
  /get/{game}:
    get:
      description: >
        Top-level endpoint for retrieving all available collections for the current game namespace.

        In addition to the name of the collection, this endpoint may also list the number of
        entries in the associated table via the `count` field. Note that the `hidden` field is of
        no practical use to API consumers as it is always `false`.

        The keys in the `resolve_list` field are permittable values for the `c:resolve=<field>`
        query command. Note that resolve lists precede the `c:join=<...>` subquery system and has
        been largely superceded by it. For this reason, the resolved fields are not included in any
        example payload or other parts of this documentation.

        Curious fact: this is one of the few endpoints in the PlanetSide 2 API that returns native
        JSON types (`boolean`, `number`, etc.) in its response, without wrapping them in a string.
      operationId: get_collections
      parameters:
        - $ref: parameters/gameParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: /get/{game}
      tags:
        - Game-Agnostic Endpoints
  /get/{game}/ability:
    get:
      description: >
        An ability triggered by a character or vehicle.


        Abilities in the API are more generic than the in-game abilities and also cover other
        mechanics such as scopes and consumables.


        The generic fields `paramX` and `stringX` are documented in the the corresponding
        `ability_type` entry."
      operationId: get_ability
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/abilityIdParam.yaml
        - $ref: parameters/abilityTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/ability.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: ability
      tags:
        - Effects & Abilities
  /get/{game}/ability_type:
    get:
      description: >
        A type of ability.


        The generic fields `paramX` and `stringX` are documented here. Note that most
        of these generic fields are currently not used.
      operationId: get_ability_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/abilityTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/ability_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: ability_type
      tags:
        - Effects & Abilities
  /get/{game}/achievement:
    get:
      description: >
        Endpoint for weapon medals and service ribbons.


        There is no "achievement type" collection or field, but they can be grouped
        by the `repeatable` field, which is only true for service ribbons.
      operationId: get_achievement
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/achievementIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/achievement.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: achievement
      tags:
        - Progression
  /get/{game}/armor_facing:
    get:
      description: >
        Enumerates the armor facing angles used for directional damage reduction on vehicles.
      operationId: get_armor_facing
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/armorFacingIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/armor_facing.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: armor_facing
      tags:
        - Damage Calculation
  /get/{game}/armor_info:
    get:
      description: A set of armor values for each armor facing angle on a vehicle.
      operationId: get_armor_info
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/armorInfoIdParam.yaml
        - $ref: parameters/armorFacingIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/armor_info.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: armor_info
      tags:
        - Damage Calculation
  /get/{game}/character:
    get:
      description: >
        Game-specific documentation for the `character` collection.


        This collection is randomly distributed across 20 different databases, causing some unusual
        behaviour when filtering. For example, the `c:distinct` parameter will fetch the distinct
        values for each database and aggregate them in the response, resulting in duplicate
        entries.


        In addition to the commonly-used parameters provided, this endpoint may be queried by any
        of its fields, including sub-keys like `times.creation`.
      operationId: get_character
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/qcLimitPerDbParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/characterNameFirstParam.yaml
        - $ref: parameters/characterNameFirstLowerParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/character.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: character
      tags:
        - Character Information
  /get/{game}/character_name:
    get:
      description: Optimized, low-bandwidth endpoint for character name resolution.
      operationId: get_character_name
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/characterNameFirstParam.yaml
        - $ref: parameters/characterNameFirstLowerParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/character_name.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: character_name
      tags:
        - Character Information
  /get/{game}/characters_achievement:
    get:
      description: List the achievement progress for a character.
      operationId: get_characters_achievement
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/achievementIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_achievement.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_achievement
      tags:
        - Character Information
  /get/{game}/characters_currency:
    get:
      description: >
        Lists the currencies owned by a character.


        Note that this table has been inconsistent since the introduction of the A.S.P. system: in
        addition to the currency value (Nanites), an extra `prestige_currency` key has been added,
        rather than being its own currency.
      operationId: get_characters_currency
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/currencyIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_currency.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_currency
      tags:
        - Character Information
  /get/{game}/characters_directive:
    get:
      description: >
        Directive completion information for a character.


        Note that this also lists entries for incomplete directives; use the `completion_time`
        field to determine whether a directive has been completed.
      operationId: get_characters_directive
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/directiveTreeIdParam.yaml
        - $ref: parameters/directiveIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_directive.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_directive
      tags:
        - Character Information
  /get/{game}/characters_directive_objective:
    get:
      description: >
        Current progress of a character within a directive.


        The current value of the directive progress can be found in the `state_data` field of this
        endpoint. The corresponding target value is found in the corresponding `objective`, usually
        in the `param1` field.
      operationId: get_characters_directive_objective
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/directiveIdParam.yaml
        - $ref: parameters/objectiveIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_directive_objective.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_directive_objective
      tags:
        - Character Information
  /get/{game}/characters_directive_tier:
    get:
      description: Directive tier completion information for a character.
      operationId: get_characters_directive_tier
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/directiveTreeIdParam.yaml
        - $ref: parameters/directiveTierIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_directive_tier.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_directive_tier
      tags:
        - Character Information
  /get/{game}/characters_directive_tree:
    get:
      description: Directive tree completion information for a character.
      operationId: get_characters_directive_tree
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/directiveTreeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_directive_tree.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_directive_tree
      tags:
        - Character Information
  /get/{game}/characters_event:
    get:
      description: >
        ReST endpoint for retrieving historical character event data.


        Like `event`, but allows querying by character. The `character_id` and `id` fields are
        interchangeable.
      operationId: get_characters_event
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/characterEventCharacterIdParam.yaml
        - $ref: parameters/characterEventTypeParam.yaml
        - $ref: parameters/beforeParam.yaml
        - $ref: parameters/afterParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_event.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_event
      tags:
        - Event History
  /get/{game}/characters_event_grouped:
    get:
      description: >
        Return character vs. character statistics.


        Allows calculating player vs. player KDR.
      operationId: get_characters_event_grouped
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/characterEventsGroupedEventTypeParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_event_grouped.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_event_grouped
      tags:
        - Event History
  /get/{game}/characters_friend:
    get:
      description: Query the friends list of a character.
      operationId: get_characters_friend
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_friend.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_friend
      tags:
        - Character Information
  /get/{game}/characters_item:
    get:
      description: >
        Query the items of a character. Note that this collection no longer lists account-wide item
        unlocks as this served as a fingerprint to identify players across multiple characters.
      operationId: get_characters_item
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_item.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_item
      tags:
        - Character Information
  /get/{game}/characters_leaderboard:
    get:
      description: >
        Query the leaderboard for a character. Note that only the top 10'000 players for a given
        statistic are tracked in the leaderboard; many characters will not have an entry in this
        collection.


        The `limit` key inserted into the response indicates the number of requested entries when
        passing multiple character IDs. Comparison with `returned` may be used to determine whether
        any characters were skipped due to not being in the leaderboard.
      operationId: get_characters_leaderboard
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/leaderboardCharacterIdParam.yaml
        - $ref: parameters/leaderboardNameParam.yaml
        - $ref: parameters/leaderboardPeriodParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_leaderboard.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_leaderboard
      tags:
        - Leaderboards
  /get/{game}/characters_online_status:
    get:
      description: Query the online status of a character.
      operationId: get_characters_online_status
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_online_status.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_online_status
      tags:
        - Character Information
  /get/{game}/characters_skill:
    get:
      description: List the skills unlocked by a character.
      operationId: get_characters_skill
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/skillIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_skill.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_skill
      tags:
        - Character Information
  /get/{game}/characters_stat:
    get:
      description: |
        Basic statistics endpoint for character-wide and class-specific
        statistics.

        - `stat_name` lists the name of the stat
        - `profile` represents the class, with a value of 0 denoting a character-wide value
      operationId: get_characters_stat
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/statNameParam_characters_stat.yaml
        - $ref: parameters/profileIdParam_character.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_stat.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_stat
      tags:
        - Statistics
  /get/{game}/characters_stat_by_faction:
    get:
      description: |
        Faction-specific statistics endpoint. Useful for determining faction bias or kill spread.

        - `stat_name` lists the name of the stat
        - `profile` represents the class, with a value of 0 denoting a character-wide value

        All `value_*` fields are provided per-faction. Note that the value for the own faction is
        often blanked: `value_nc` of the stat `kills` cannot be used to enumerate an NC character's
        team kills, for example.
      operationId: get_characters_stat_by_faction
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/statNameParam_characters_stat_by_faction.yaml
        - $ref: parameters/profileIdParam_character.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_stat_by_faction.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_stat_by_faction
      tags:
        - Statistics
  /get/{game}/characters_stat_history:
    get:
      description: |
        Statistics endpoint for historical character stats. In addition to the `all_time` and
        `one_life_max` keys, values are also provided for the last 31 days (`day`), 12 months
        (`month`), or 13 weeks (`week`).

        - `stat_name` lists the name of the stat
        - `profile` represents the class, with a value of 0 denoting a character-wide value
      operationId: get_characters_stat_history
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/statNameParam_characters_stat_history.yaml
        - $ref: parameters/profileIdParam_character.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_stat_history.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_stat_history
      tags:
        - Statistics
  /get/{game}/characters_weapon_stat:
    get:
      description: |
        Weapon statistics endpoint containing generic values such as playtime or score while
        wielding. The most common use is calculating the accuracy of a player with a given weapon
        by dividing `weapon_hit_count` by `weapon_fire_count`.

        - `stat_name` lists the name of the stat
        - `item_id` identifies the item for the weapon. Note that this value can be zero, in that
          case it serves as a catch-all for all weapons for the given `vehicle_id`.
        - `vehicle_id` the vehicle on which the weapon is available.
      operationId: get_characters_weapon_stat
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/statNameParam_characters_weapon_stat.yaml
        - $ref: parameters/itemIdParam.yaml
        - $ref: parameters/vehicleIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_weapon_stat.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_weapon_stat
      tags:
        - Statistics
  /get/{game}/characters_weapon_stat_by_faction:
    get:
      description: |
        Faction-specific weapon statistics endpoint containing combat-focussed stats such as kills,
        deaths, headshots and damage dealt/taken.

        - `stat_name` lists the name of the stat
        - `item_id` identifies the item for the weapon. Note that this value can be zero, in that
          case it serves as a catch-all for all weapons for the given `vehicle_id`.
        - `vehicle_id` the vehicle on which the weapon is available.
      operationId: get_characters_weapon_stat_by_faction
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/statNameParam_characters_weapon_stat_by_faction.yaml
        - $ref: parameters/itemIdParam.yaml
        - $ref: parameters/vehicleIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_weapon_stat_by_faction.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_weapon_stat_by_faction
      tags:
        - Statistics
  /get/{game}/characters_world:
    get:
      description: Query the server a character is on.
      operationId: get_characters_world
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/characters_world.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: characters_world
      tags:
        - Character Information
  /get/{game}/currency:
    get:
      description: >
        Lists currencies available in the game.


        As of 2023-06-13, the only currency available are Nanites. Outfit resources and other
        currencies such as Daybreak Cash, ISO-4, or A7 are not available on the API, while Cert
        Points and A.S.P. tokens are stored in the `character` collection.
      operationId: get_currency
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/currencyIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/currency.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: currency
      tags:
        - Basics
  /get/{game}/directive:
    get:
      description: >
        An individual directive that may be completed by a player.


        This collection lists an individual directive, such as "100 Roadkills".
      operationId: get_directive
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/directiveIdParam.yaml
        - $ref: parameters/directiveTreeIdParam.yaml
        - $ref: parameters/directiveTierIdParam.yaml
        - $ref: parameters/objectiveSetIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/directive.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: directive
      tags:
        - Progression
  /get/{game}/directive_tier:
    get:
      description: >
        A completion tier within a directive tree.


        This covers the individual stages of directive tiers, such as "Combat Medic: Adept".
      operationId: get_directive_tier
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/directiveTreeIdParam.yaml
        - $ref: parameters/directiveTierIdParam.yaml
        - $ref: parameters/rewardSetIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/directive_tier.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: directive_tier
      tags:
        - Progression
  /get/{game}/directive_tree:
    get:
      description: >
        A tree of directives sorted into multiple tiers.


        This collection represents the individual paths within a directive category, such as
        "Light Assault" or "Combat Medic".
      operationId: get_directive_tree
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/directiveTreeIdParam.yaml
        - $ref: parameters/directiveTreeCategoryIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/directive_tree.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: directive_tree
      tags:
        - Progression
  /get/{game}/directive_tree_category:
    get:
      description: >
        Top-level categorisation of directive trees.


        This covers the main sections in the Directive menu, such as "Infantry", "Vehicles", or
        "Events".
      operationId: get_directive_tree_category
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/directiveTreeCategoryIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/directive_tree_category.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: directive_tree_category
      tags:
        - Progression
  /get/{game}/effect:
    get:
      description: >
        A weapon-based effect acting on players or vehicles.


        Weapon-based effects include direct and indirect damage effects, tactical grenade impacts,
        as well as pseudo-weapons such as the Medic tool or Engineer repair tool. For world-based
        effects, weapon attachments and buffs, see the `zone_effect` collection instead.


        See the `effect_type` collection for a list of available effect types.
      operationId: get_effect
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/effectIdParam.yaml
        - $ref: parameters/effectTypeIdParam.yaml
        - $ref: parameters/abilityIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/effect.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: effect
      tags:
        - Effects & Abilities
  /get/{game}/effect_type:
    get:
      description: >
        A type of effect.


        The generic fields `paramX` and `stringX` are documented here. Note that not all fields are
        used by all effect types, or at all.
      operationId: get_effect_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/effectTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/effect_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: effect_type
      tags:
        - Effects & Abilities
  /get/{game}/empire_scores:
    get:
      description: Defunct endpoint for the "World Domination Series" event scores.
      operationId: get_empire_scores
      parameters:
        - $ref: parameters/gameParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/empire_scores.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: empire_scores (Defunct)
      tags:
        - Metagame & Alerts
  /get/{game}/event:
    get:
      description: |
        ReST endpoint for retrieving historical event data.

        These largely mirror the corresponding events in the ESS:

        - `ItemAdded` -> `ITEM`
        - `Death` -> `KILL`/`DEATH`
        - `BattleRankUp` -> `BATTLE_RANK`
        - `PlayerFacilityCapture`/`PlayerFacilityDefend` -> `FACILITY_CHARACTER`
        - `AchievementEarned` -> `ACHIEVEMENT`
        - `FacilityControl` -> `FACILITYCONTROL`
        - `MetagameEvent` -> `METAGAME`"
      operationId: get_event
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/eventTypeParam.yaml
        - $ref: parameters/beforeParam.yaml
        - $ref: parameters/afterParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/event.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: event
      tags:
        - Event History
  /get/{game}/experience:
    get:
      description: Lists the different types of experience ticks.
      operationId: get_experience
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/experienceIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/experience.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: experience
      tags:
        - Basics
  /get/{game}/experience_award_type:
    get:
      description: >
        Experience type, such as "Kill Assist".
        
      
        Groups experience ticks. For example, "Kill Assist - Flash" and "Kill Player Assist" are both part of the "KillAssist" award type.        
      operationId: get_experience_award_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/experienceAwardTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/experience_award_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: experience_award_type
      tags:
        - Basics
  /get/{game}/experience_rank:
    get:
      description: >
        Player rank gained through leveling up.


        Note that the `rank` field is not unique, as each rank is duplicated for each prestige
        (aka. A.S.P.) level. The prestige entries can only be distinguished by their icons.
      operationId: get_experience_rank
      parameters:
        - $ref: parameters/gameParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/experience_rank.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: experience_rank
      tags:
        - Progression
  /get/{game}/facility_link:
    get:
      description: >
        Resolves lattice links between facilities.


        There is no reliable difference between `facility_id_a` and `facility_id_b`; the former
        tends to be closer to the respective warpgate, but this does not hold true for all links.
        It is recommended to treat the link direction as arbitrary.
      operationId: get_facility_link
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/facilityIdAParam.yaml
        - $ref: parameters/facilityIdBParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/facility_link.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: facility_link
      tags:
        - Map Data
  /get/{game}/facility_type:
    get:
      description: Lists all facility types across all zones and game modes.
      operationId: get_facility_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/facilityTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/facility_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: facility_type
      tags:
        - Map Data
  /get/{game}/faction:
    get:
      description: >
        Endpoint for playable and non-playable factions.

        In addition to the main empires VS, NC, and TR, this also lists NS Operatives as the 4th
        faction. Note that a faction ID of zero does not denote an empty value. Instead, it
        represents a special "None" faction, which is used for common pool equipment, and also
        serves as a sentinel value for disabled facilities in the context of facility ownership.

        When working with the Event Streaming Service (ESS), you will encounter a `team_id` field
        in certain payloads. This is used to control friend-or-foe status for NSO players, or for
        the opposing factions in Outfit Wars.

        During regular gameplay (i.e. outside of Outfit Wars), it is generally safe to treat a team
        ID as a faction. However, care should be taken during Outfit Wars matches as the team IDs
        will map to the Alpha and Omega team instead.
      operationId: get_faction
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/factionIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/faction.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: faction
      tags:
        - Basics
  /get/{game}/fire_group:
    get:
      description: >
        Fire groups in the API are synonymous with fire modes in-game, they represent the different
        operating modes some weapons can switch between.


        This includes select-fire modes for infantry weapons, as well as knives switching between
        quick knife, wielded knive, and - in the case of power knives - the one-hit-kill mode.
      operationId: get_fire_group
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/fireGroupIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/fire_group.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: fire_group
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/fire_mode:
    get:
      description: >
        **Note:** This table has been largely superceded by `fire_mode_2`, which contains
        additional and more accurate information about firing mechanics.


        This endpoint shows detailed information about a given fire mode for a weapon, including
        damage ranges, muzzle velocity, and reload time.


        For details on the cone-of-fire mechanics, resolve the `player_state_group_id` field.
      operationId: get_fire_mode
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/fireModeIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/fire_mode.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: fire_group (Legacy)
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/fire_mode_2:
    get:
      description: |
        Main endpoint for baseline weapon characteristics and firing mechanics. This includes:

        - Damage effects and ranges
        - Recoil magnitude and pattern
        - Triggered abilities for pseudo-weapons such as the medical applicator
        - Ammunition consumption and pellet count
        - Heat-mechanics

        Be aware that lockon information is currently disconnected from the game data and has not
        been outdated. Refer to the PS2 Wiki for up-to-date information for the time being.
      operationId: get_fire_mode_2
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/fireModeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/fire_mode_2.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: fire_mode_2
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/fire_mode_to_projectile:
    get:
      description: Maps fire modes to their projectiles.
      operationId: get_fire_mode_to_projectile
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/fireModeIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/fire_mode_to_projectile.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: fire_mode_to_projectile
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/fire_mode_type:
    get:
      description: >
        Enumeration of the types of fire modes.


        This servers to differentiate between melee attacks, projectile weapons, throwables, and
        pseudo-weapon fire modes used to trigger activated items.
      operationId: get_fire_mode_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/fireModeTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/fire_mode_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: fire_mode_type
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/image:
    get:
      description: >
        Lists individual image assets available on the API.


        Note that historically, not all assets listed here are available on the image endpoint, and
        not all available assets are listed.
      operationId: get_image
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/imageIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/image.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: image
      tags:
        - Image Assets
  /get/{game}/image_set:
    get:
      description: >
        Lists related image assets belonging to the same set.


        Note that this endpoint is a mapping; the `image_set_id` is not a unique key. The
        individual image types in a set are generally used to provide different sizes of the same
        image (e.g. icon previes or minimal icons).
      operationId: get_image_set
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/imageSetIdParam.yaml
        - $ref: parameters/imageIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/image_set.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: image_set
      tags:
        - Image Assets
  /get/{game}/image_set_default:
    get:
      description: Lists the default image for a given image set.
      operationId: get_image_set_default
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/imageSetIdParam.yaml
        - $ref: parameters/imageIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/image_set_default.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: image_set_default
      tags:
        - Image Assets
  /get/{game}/item:
    get:
      description: >
        Items in PlanetSide 2 are used to represent weapons, tools, and consumables, but also
        cosmetic items and internal control objects for player renaming or outfit resource
        consumption. Use the `item_type` collection to narrow searches to specific types.
      operationId: get_item
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/item.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: item
      tags:
        - Items & Bundles
  /get/{game}/item_attachment:
    get:
      description: Maps attachment items to the items they can be attached to.
      operationId: get_item_attachment
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/item_attachment.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: item_attachment
      tags:
        - Items & Bundles
  /get/{game}/item_category:
    get:
      description: >
        Item categories are used to group items together for display in the loadout screen or
        depot.
      operationId: get_item_category
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemCategoryIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/item_category.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: item_category
      tags:
        - Items & Bundles
  /get/{game}/item_profile:
    get:
      description: Maps items to profiles (classes/vehicles) that have access to them.
      operationId: get_item_profile
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemIdParam.yaml
        - $ref: parameters/profileIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/item_profile.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: item_profile
      tags:
        - Items & Bundles
  /get/{game}/item_to_weapon:
    get:
      description: >
        Maps items (including name, availability) to its respective weapon object.


        Not all items have a weapon objects, though some filtering can be done through the
        `item_type_id` field, with the ID 26 representing most weapon types.
      operationId: get_item_to_weapon
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemIdParam.yaml
        - $ref: parameters/weaponIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/item_to_weapon.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: item_to_weapon
      tags:
        - Items & Bundles
  /get/{game}/item_type:
    get:
      description: >
        Items in PlanetSide 2 represent many different things beyond weapons, such as implant
        packs, cosmetics, or name change tokens. They are also used as internal helpers when
        pulling outfit resources, spawning vehicles, or interacting with certain terminals.


        This collection lists the different item types, though many of these are never encountered
        on the API.
      operationId: get_item_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/item_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: item_type
      tags:
        - Items & Bundles
  /get/{game}/leaderboard:
    get:
      description: >
        Global leaderboard for a given server. This only includes the top 10'000 players for a
        given category and is not directly searchable. See `characters_leaderboard` to look up a
        character's ranking.


        `c:start` and `c:limit` are supported and allow for pagination. `c:join` and `c:tree` are
        also permitted. Any other query commands will be silently ignored.


        Unlike most other tables, this one defaults to a `c:limit` value of 10 and is always sorted
        in ascending order of leaderboard rank.
      operationId: get_leaderboard
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/leaderboardNameParam.yaml
        - $ref: parameters/leaderboardPeriodParam.yaml
        - $ref: parameters/worldIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/leaderboard.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: leaderboard
      tags:
        - Leaderboards
  /get/{game}/loadout:
    get:
      description: >
        Enumeration of the six infantry classes for each playable faction.


        Note that this is different from the in-game loadouts, which are not available on the API.
      operationId: get_loadout
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/loadoutIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/loadout.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: loadout
      tags:
        - Basics
  /get/{game}/map:
    get:
      description: >
        Map status endpoint.


        This collection can only be queried with a single `world_id` and any number of `zone_ids`
        (note that the parameter is plural). Also note the non-standard payload format requiring
        different parsing rules.


        For partially locked continents, the unavailable regions will report a `FactionId` of zero.
      operationId: get_map
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/worldIdParam.yaml
        - description: Unique identifier of a zone.
          in: query
          name: zone_ids
          schema:
            type: string
          x-cast-to: int32
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/map.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: map
      tags:
        - Map Data
  /get/{game}/map_hex:
    get:
      description: >
        Endpoint for retrieving map hex coordinates.

        This data can be used to reconstruct the in-game facility outlines from API data.


        The X and Y coordinates listed in the entries to this collection are not Cartesian and do
        not match up with the `location_<n>` fields of `map_region`. Instead, they are describing
        locations in a non-orthogonal hexagonal grid, which must be converted by the user.


        This website has a great write-up on hexagonal coordinate systems:
        <https://www.redblobgames.com/grids/hexagons/>.

        The coordinate system used by PlanetSide 2 matches the "Axial coordinates" described in the
        article, except that the first coordinate X faces east, and the second coordinate Y faces
        up and to the right at a 60° angle.
      operationId: get_map_hex
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/mapRegionIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/map_hex.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: map_hex
      tags:
        - Map Data
  /get/{game}/map_region:
    get:
      description: >
        A region on the in-game map.


        Map regions are largely identical to their corresponding regions, but use the internal
        `facility_name` instead of a localized string. A `map_region_id` and `region_id` are
        interchangeable.


        Additionally, this collection allows connecting facilities to map region IDs.


        Note that the continuous outfit resource gain is listed in "ticks", not minutes. Ticks are
        5 minutes as of writing, meaning that a Tech Plant will list a tick reward of 8 Synthium,
        corresponding to the 1.6 Synthium per minute advertised in-game.
      operationId: get_map_region
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/mapRegionIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/map_region.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: map_region
      tags:
        - Map Data
  /get/{game}/marketing_bundle:
    get:
      description: >
        Bundles available for purchase in the in-game store (Depot). This collection represents
        actual bundles. For pseudo-bundles used to purchase individual weapon attachments or
        cosmetics, see the `marketing_bundle_with_1_item` collection instead.


        Note that there is no guaranteed way of determining whether a given bundle is currently
        available for purchase. This collection contains many entries for defunct items and
        bundles, such as the single-use camos from the early days of the game.


        This collection is automatically maintained and generally accurate with regards to
        certification prices, the daybreak/station cash values are generally less reliable.
      operationId: get_marketing_bundle
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/marketingBundleIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/marketing_bundle.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: marketing_bundle
      tags:
        - Items & Bundles
  /get/{game}/marketing_bundle_item:
    get:
      description: Maps marketing bundles to the items they contain.
      operationId: get_marketing_bundle_item
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/marketingBundleIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/marketing_bundle_item.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: marketing_bundle_item
      tags:
        - Items & Bundles
  /get/{game}/marketing_bundle_with_1_item:
    get:
      description: >
        These are pseudo-bundles with exactly 1 item each, allowing players to buy individual
        weapons or cosmetics with Daybreak Cash (formerly Station Cash).


        Note that in the case of weapons, these bundles are genreally mirrored by 'regular' bundles
        in the `marketing_bundle` collection, with the same `marketing_bundle_id`.
      operationId: get_marketing_bundle_with_1_item
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/marketingBundleIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/marketing_bundle_with_1_item.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: marketing_bundle_with_1_item
      tags:
        - Items & Bundles
  /get/{game}/metagame_event:
    get:
      description: >
        In-game alerts and other alert-like events.


        Note that this endpoint lists alert types that may not be currently enabled in-game, such as
        the 'Aerial Anomaly' and 'MAXimum Pressure' alert types.
      operationId: get_metagame_event
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/metagameEventIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/metagame_event.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: metagame_event
      tags:
        - Metagame & Alerts
  /get/{game}/metagame_event_state:
    get:
      description: Enumeratess the available states for alerts.
      operationId: get_metagame_event_state
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/metagameEventStateIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/metagame_event_state.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: metagame_event_state
      tags:
        - Metagame & Alerts
  /get/{game}/objective:
    get:
      description: >
        An objective tracking progress towards a directive, mission, or achievement.


        See the `objective_type` collection for a list of available objective types.
      operationId: get_objective
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/objectiveIdParam.yaml
        - $ref: parameters/objectiveTypeIdParam.yaml
        - $ref: parameters/objectiveGroupIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/objective.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: objective
      tags:
        - Progression
  /get/{game}/objective_set_to_objective:
    get:
      description: >
        Maps objective sets to objective groups.


        This collection is peculiar as neither of the types it connects are available on the API.
        It is however essential for connecting the `directive` collection to `objective` and
        `objective_type`.


        Note that when joining to these queries, the `^on:` and `^to:` fields must be used to
        specify the relationship.
      operationId: get_objective_set_to_objective
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/objectiveSetIdParam.yaml
        - $ref: parameters/objectiveGroupIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/objective_set_to_objective.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: objective_set_to_objective
      tags:
        - Progression
  /get/{game}/objective_type:
    get:
      description: >
        A type of objective.


        The generic `paramX` fields are documented here. Note that not all fields are used by all
        objective types, or at all.
      operationId: get_objective_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/objectiveTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/objective_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: objective_type
      tags:
        - Progression
  /get/{game}/outfit:
    get:
      description: A player-run outfit or clan.
      operationId: get_outfit
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/outfitIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/outfit.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: outfit
      tags:
        - Player Outfits
  /get/{game}/outfit_member:
    get:
      description: >
        Outfit membership information for a givne character. Characters that are not members of any
        outfit will not have an entry in this collection.
      operationId: get_outfit_member
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/outfitIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/outfit_member.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: outfit_member
      tags:
        - Player Outfits
  /get/{game}/outfit_member_extended:
    get:
      description: >
        Another variant of the `outfit_member` collection, but with the contents of the
        corresponding `outfit` merged in. This is useful for bulk lookups of outfit information for
        heterogenous lists of characters without requiring the explicit use of `c:join` or
        `c:resolve`.
      operationId: get_outfit_member_extended
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
        - $ref: parameters/outfitIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/outfit_member_extended.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: outfit_member_extended
      tags:
        - Player Outfits
  /get/{game}/outfit_rank:
    get:
      description: >
        Outfits can define their own custom rank names and permissions, which are listed here.
        Outfits using the default rank names may not have an entry here.
      operationId: get_outfit_rank
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/outfitIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/outfit_rank.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: outfit_rank
      tags:
        - Player Outfits
  /get/{game}/profile:
    get:
      description: >
        Original endpoint for infantry profiles. This covers the names and loadout IDs connected to
        a given profile, and additionally provides movement speed multiplier information for
        infantry classes. Note that the key fields are also provided by `profile_2`, which not only
        covers infantry but also vehicles, deployables, and other entities.
      operationId: get_profile
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/profileIdParam.yaml
        - $ref: parameters/loadoutIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/profile.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: profile (Infantry)
      tags:
        - Basics
  /get/{game}/profile_2:
    get:
      description: >
        Extended profile endpoint containing all entity types, including NPCs, construction items,
        and deployables.
      operationId: get_profile_2
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/profileIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/profile_2.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: profile_2 (All)
      tags:
        - Basics
  /get/{game}/profile_armor_map:
    get:
      description: >
        Maps profiles to the relevant `armor_info` entries.


        Note that many of the IDs used here are only available in `profile_2`. Additionally, armor
        values only concern vehicles, with infantry and deployable classes not having any entries
        here.
      operationId: get_profile_armor_map
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/armorInfoIdParam.yaml
        - $ref: parameters/profileIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/profile_armor_map.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: profile_armor_map
      tags:
        - Damage Calculation
  /get/{game}/profile_resist_map:
    get:
      description: >
        Maps profiles to the relevant `resist_info` entries. Note that many of the profile IDs used
        here are only available in the `profile_2` collection.
      operationId: get_profile_resist_map
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/resistInfoIdParam.yaml
        - $ref: parameters/profileIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/profile_resist_map.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: profile_resist_map
      tags:
        - Damage Calculation
  /get/{game}/projectile:
    get:
      description: >
        Projectiles specify the travel characteristics of a weapon on its way to the target, such
        as its speed, its bullet drop, or maximum flight time/distance.


        Note that multiple fire modes can use the same projectile. This usually includes the
        hipfire vs. aimed fire modes, but can also include different weapons altogether.
      operationId: get_projectile
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/projectileIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/projectile.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: projectile
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/projectile_flight_type:
    get:
      description: >
        Enumerates the flight types used to categorize projectiles by their travel characteristics.


        This mostly controls whether the projectile is ballistic, Flak-based, or "Dynamic", used to
        represent thrown items such as grenades, explosives, and ammo packs.
      operationId: get_projectile_flight_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/projectileFlightTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/projectile_flight_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: projectile_flight_type
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/region:
    get:
      description: >
        Display name of the game regions.


        This endpoint mostly contains the localized display name of the a map region. Regions and
        map regions are interchangeable and governed by the same IDs.
      operationId: get_region
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/regionIdParam.yaml
        - $ref: parameters/zoneIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/region.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: region
      tags:
        - Map Data
  /get/{game}/resist_info:
    get:
      description: Lists resistances against certain types of damage.
      operationId: get_resist_info
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/resistInfoIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/resist_info.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: resist_info
      tags:
        - Damage Calculation
  /get/{game}/resist_type:
    get:
      description: >
        Enumeration of resistance types used to balance damage types against various targets.
      operationId: get_resist_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/resistTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/resist_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: resist_type
      tags:
        - Damage Calculation
  /get/{game}/resource_type:
    get:
      description: Resources consumed by abilities such as the Heavy Overshield.
      operationId: get_resource_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/resourceTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/resource_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: resource_type
      tags:
        - Effects & Abilities
  /get/{game}/reward:
    get:
      description: >
        A reward granted for completing a directive, mission, or achievement.
      operationId: get_reward
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/rewardIdParam.yaml
        - $ref: parameters/rewardTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/reward.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: reward
      tags:
        - Progression
  /get/{game}/reward_group_to_reward:
    get:
      description: >
        Maps a reward group to one or more rewards.


        This collection, together with `reward_set_to_reward_group`, allows connecting directive
        tiers to the rewards they grant upon completion.
      operationId: get_reward_group_to_reward
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/rewardIdParam.yaml
        - $ref: parameters/rewardGroupIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/reward_group_to_reward.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: reward_group_to_reward
      tags:
        - Progression
  /get/{game}/reward_set_to_reward_group:
    get:
      description: >
        Maps a reward set to its reward group.


        This collection, together with `reward_group_to_reward`, allows connecting directive tiers
        to the rewards they grant upon completion.
      operationId: get_reward_set_to_reward_group
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/rewardSetIdParam.yaml
        - $ref: parameters/rewardGroupIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/reward_set_to_reward_group.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: reward_set_to_reward_group
      tags:
        - Progression
  /get/{game}/reward_type:
    get:
      description: >
        A type of reward.


        The generic `paramX` fields are documented here. Note that not all fields are used by all
        reward types, or at all.
      operationId: get_reward_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/rewardTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/reward_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: reward_type
      tags:
        - Progression
  /get/{game}/single_character_by_id:
    get:
      description: |
        Endpoint for retrieving bulk character stats.

        This endpoint's payload is a superset of `character` and additionally includes data from
        related `characters_*` collections:

        - `characters_currency`
        - `characters_stat_history`
        - `characters_stat`
        - `characters_stat_by_faction`
        - `characters_weapon_stat`
        - `characters_weapon_stat_by_faction`
        - `characters_items`

        This endpoint is generally faster than querying these collections individually, but it
        comes with significant bandwidth costs. Note that this endpoint does not support most query
        commands, and that `c:show` and `c:hide` cannot be used to reduce the amount of data
        returned.
      operationId: get_single_character_by_id
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/characterIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/single_character_by_id.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: single_character_by_id
      tags:
        - Character Information
  /get/{game}/skill:
    get:
      description: Purchasable skills, such as certifications and A.S.P. skills.
      operationId: get_skill
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/skillIdParam.yaml
        - $ref: parameters/skillLineIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/skill.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: skill
      tags:
        - Certifications & A.S.P.
  /get/{game}/skill_category:
    get:
      description: >
        Skill categories represent a grouping of skills.


        They usually group skills by the loadout slots for which they provide items, such as
        "Passive Systems" or "Ability Slot". On weapons, they generally represent a given
        attachment slot.
      operationId: get_skill_category
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/skillCategoryIdParam.yaml
        - $ref: parameters/skillSetIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/skill_category.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: skill_category
      tags:
        - Certifications & A.S.P.
  /get/{game}/skill_line:
    get:
      description: Skill lines represent upgrade paths for skills, such as Ammo Capacity.
      operationId: get_skill_line
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/skillLineIdParam.yaml
        - $ref: parameters/skillCategoryIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/skill_line.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: skill_line
      tags:
        - Certifications & A.S.P.
  /get/{game}/skill_set:
    get:
      description: >
        Skill sets represent the top-level grouping of skills.


        In the old certification menu, this would group weapon-related skill lines into a sub-tree
        beneath the weapon itself.
      operationId: get_skill_set
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/skillSetIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/skill_set.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: skill_set
      tags:
        - Certifications & A.S.P.
  /get/{game}/target_type:
    get:
      description: >
        Enumerates the target types used to categorize the applicable targets of a weapon or
        effect.


        This is effectively a constant mapping and can be cached aggressively.
      operationId: get_target_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/targetTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/target_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: target_type
      tags:
        - Damage Calculation
  /get/{game}/title:
    get:
      description: >
        Selectable titles for a character.


        Note that title IDs of 0 signify no title being selected.
      operationId: get_title
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/titleIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/title.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: title
      tags:
        - Character Information
  /get/{game}/vehicle:
    get:
      description: >
        Basic vehicle information such as name, description, and type.


        Note that vehicle types are only used internally and are not directly tied to damage
        mechanics or resistances. Liberators and Galaxies are still considered "Light Aircraft" in
        this endpoint.
      operationId: get_vehicle
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/vehicleIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/vehicle.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: vehicle
      tags:
        - Vehicles
  /get/{game}/vehicle_attachment:
    get:
      description: |
        Maps items to the vehicles and factions that have access to them.

        The `slot_id` field is used to identify where the item is attached to. The below list shows
        the types of items for each slot as of June 2023:

        ```
        ID   Description

        1    Primary Weapon
        2    Secondary Weapon
        3    Ability Slot
        4    Defensive Slot
        5    Chassis / Airframe
        6    Cockpit / Hood Ornament
        7    Camo
        8    Decal
        9    Exterior
        10   Weapon Slot / Catapult
        11   Weapon Slot / Catapult
        12   Afterburner / Nitrous
        13   (Unused)
        14   (Internal: Headlights)
        15   Horn
        16   Trim
        17   Lighting
        18   Hubcaps
        19   Other
        20   Tire Traits / Catapult
        21   Catapult
        22   Catapult
        ```

        Note that this list is maintained manually and may be out of date. The slot associations
        are not available on the API.
      operationId: get_vehicle_attachment
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/vehicleIdParam.yaml
        - $ref: parameters/factionIdParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/vehicle_attachment.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: vehicle_attachment
      tags:
        - Vehicles
  /get/{game}/vehicle_faction:
    get:
      description: Maps vehicles to the factions that have access to them.
      operationId: get_vehicle_faction
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/vehicleIdParam.yaml
        - $ref: parameters/factionIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/vehicle_faction.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: vehicle_faction
      tags:
        - Vehicles
  /get/{game}/vehicle_skill_set:
    get:
      description: >
        Maps vehicles to the skill sets that they use.


        Note that this relationship is expressed for each faction separetly.
      operationId: get_vehicle_skill_set
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/vehicleIdParam.yaml
        - $ref: parameters/skillSetIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/vehicle_skill_set.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: vehicle_skill_set
      tags:
        - Vehicles
  /get/{game}/weapon:
    get:
      description: >
        Baseline weapon data, such as equip times, stock sights, and movement speed modifiers.
      operationId: get_weapon
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/weaponIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/weapon.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: weapon
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/weapon_ammo_slot:
    get:
      description: >
        Ammo slot data for a given weapon, including the clip size, reserve ammo capacity, and
        resupply behaviour.
      operationId: get_weapon_ammo_slot
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/weaponIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/weapon_ammo_slot.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: weapon_ammo_slot
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/weapon_datasheet:
    get:
      description: >
        **Deprecated:** This table is not directly tied to the underlying fire mode and player
        state group data and may differ wildly from the true values!


        Suggested alternatives for the values provided by this collection are listed as part of the
        `weapon_datasheet` schema.
      operationId: get_weapon_datasheet
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/weapon_datasheet.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: weapon_datasheet (Deprecated)
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/weapon_to_attachment:
    get:
      description: >
        Maps weapons to the attachments available to them. This table is largely synonymous with
        `item_attachment`, but contains additional entries that may not resolve to a valid item.


        For this reason, it is recommended to base any attachment queries on the
        `item_attachment` endpoint instead.
      operationId: get_weapon_to_attachment
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/itemIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/weapon_to_attachment.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: weapon_to_attachment
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/weapon_to_fire_group:
    get:
      description: >
        Maps weapons to their set of fire groups. The `fire_group_index` field matches the in-game
        fire mode selection; hitting 'B' in-game is equivalent to incrementing the index by 1.
      operationId: get_weapon_to_fire_group
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/weaponIdParam.yaml
        - $ref: parameters/fireGroupIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/weapon_to_fire_group.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: weapon_to_fire_group
      tags:
        - Weapons & Firing Mechanics
  /get/{game}/world:
    get:
      description: A game server for a given region and game.
      operationId: get_world
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/worldIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/world.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: world
      tags:
        - Basics
  /get/{game}/world_event:
    get:
      description: >
        ReST endpoint for retrieving historical world events.


        The `world_id` and `id` fields are interchangeable.
      operationId: get_world_event
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/worldIdParam.yaml
        - $ref: parameters/worldEventWorldIdParam.yaml
        - $ref: parameters/worldEventTypeParam.yaml
        - $ref: parameters/beforeParam.yaml
        - $ref: parameters/afterParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/world_event.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: world_event
      tags:
        - Event History
  /get/{game}/world_stat_history:
    get:
      description: Historical data for a given global event.
      operationId: get_world_stat_history
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/worldIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/world_stat_history.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: world_stat_history (Defunct)
      tags:
        - Metagame & Alerts
  /get/{game}/zone:
    get:
      description: World continent and dynamic zone information.
      operationId: get_zone
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/zoneIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/zone.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: zone
      tags:
        - Basics
  /get/{game}/zone_effect:
    get:
      description: >
        Passive effects such as weapon stat modifications from attachments or equipped skills.


        For weapon damage effects, see `effect` instead. See the `zone_effect_type` collection for
        a list of available zone effect types.
      operationId: get_zone_effect
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/zoneEffectIdParam.yaml
        - $ref: parameters/zoneEffectTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/zone_effect.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: zone_effect
      tags:
        - Effects & Abilities
  /get/{game}/zone_effect_type:
    get:
      description: >
        A type of zone effect.


        The generic fields `paramX` and `stringX` are documented here. Note that not all fields are
        used by all zone effect types, or at all.
      operationId: get_zone_effect_type
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/zoneEffectTypeIdParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/zone_effect_type.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: zone_effect_type
      tags:
        - Effects & Abilities
  /get/{game}/{collection}:
    get:
      description: >
        This endpoint documents generic parameters available on most collections.


        For details on collection-specific variables and response schemas, please see the
        respective collection's query entry.
      operationId: get_generic
      parameters:
        - $ref: parameters/gameParam.yaml
        - $ref: parameters/collectionParam.yaml
        - $ref: parameters/qcShowParam.yaml
        - $ref: parameters/qcHideParam.yaml
        - $ref: parameters/qcSortParam.yaml
        - $ref: parameters/qcHasParam.yaml
        - $ref: parameters/qcResolveParam.yaml
        - $ref: parameters/qcCaseParam.yaml
        - $ref: parameters/qcLimitParam.yaml
        - $ref: parameters/qcLimitPerDbParam.yaml
        - $ref: parameters/qcStartParam.yaml
        - $ref: parameters/qcIncludeNullParam.yaml
        - $ref: parameters/qcLangParam.yaml
        - $ref: parameters/qcJoinParam.yaml
        - $ref: parameters/qcTreeParam.yaml
        - $ref: parameters/qcTimingParam.yaml
        - $ref: parameters/qcExactMatchFirstParam.yaml
        - $ref: parameters/qcDistinctParam.yaml
        - $ref: parameters/qcRetryParam.yaml
      responses:
        "200":
          content:
            application/json:
              $ref: contents/get/{game}/{collection}.yaml
          description: OK
        4XX:
          description: The Census API does not use HTTP status codes to indicate errors.
      summary: /get/{game}/{collection}
      tags:
        - Game-Agnostic Endpoints
security: []
servers:
  - description: >
      Casual-use Daybreak Games endpoint, throttled to 10 requests per minute and IP address
    url: https://census.daybreakgames.com
  - description: Production Daybreak Games endpoint, with service ID
    url: https://census.daybreakgames.com/{serviceId}
    variables:
      serviceId:
        default: s:example
  - description: >
      Unofficial Community endpoint for static data.

      Visit the project URL for details.
    url: https://census.lithafalcon.cc
tags:
  - description: >
      This section covers basic Census API usage and parameters.

      The parameters and response schemas documented here are applicable to all Daybreak Games
      titles supported by the Census API. All other sections cover specific groups of collections
      or endpoints that are unique to the PlanetSide 2 namespaces `ps2:v2`, `ps2ps4us:v2`, and
      `ps2ps4eu:v2`.

      ### Query Commands

      The query commands documented for the generic endpoints are generally universal and can be
      used with any of the game-specific collections listed in this documentation. However, they
      are not listed explicitly for brevity.

      ### Parameters

      Most endpoints support filtering and sorting by any field in the response schema. As with
      query parameters, this is not modelled in the documentation to improve readability and focus
      on the most important parameters.

      ### Exceptions and Limitations

      Some collections are special and have restrictions on the query commands and parameters that
      may be used with them. These are documented in the ["Special" PS2
      Collections](https://census.daybreakgames.com/#special-collections) section of the Census API
      documentation.
    name: Game-Agnostic Endpoints
  - description: >
      This section covers player names, directives, and other character-specific collections.

      ### Name Lookups

      Names in PlanetSide 2 are case-insensitive. When looking up a character by name, it is
      preferable to transform your search query to a lowercase string and compare it against the
      `character.name.first_lower` field. Case-insensitive queries against the `character.name`
      field are supported, but may be significantly slower.

      ### Character Collection Quirks

      The records of the `character` collection are distributed across multiple separate databases,
      each of which handles the same query individually before their results are combined. This
      means that extra care must be taken when using pagination to step through the data, or when
      expecting a specific ordering of results: each database will sort its results independently,
      leading to out-of-order results in the final response received by the client.


      When ordering is critical, consider using the `c:limitPerDB` query command to fetch the
      desired number of entries for each database individually and performing a final sort on the
      client side. This will ensure that the final ordering is consistent, but it will also lead
      to 20x as much data received, much of which may not be required.

      ### Single Character By ID

      When retrieving a lot of character data, it may be preferable to use the
      `single_character_by_id` endpoint instead of individual joins and queries to the relevant
      endpoints. It is an aggregation of owned items and most player statistics, and is generally
      much faster to retrieve than the equivalent data from the individual endpoints.


      Note that this endpoint has no support for filtering or result field selection, resulting in
      payloads of several hundred kilobytes in size.
    name: Character Information
  - description: >
      Core collections related to the PlanetSide 2 game world.

      ### Worlds

      A "world" in the PlanetSide 2 API refers to a game server. The `world` collection contains
      the IDs and names of the game servers.


      Basic server status (locked vs. online) is available as part of the `world` collection. There
      is a `global/game_server_status` endpoint that can be used to retrieve more detailed status
      of game servers:

      > **Warning:** This endpoint is not explicitly advertised in the Census API documentation and
        is not covered by the Census API's terms of service. Use at your own risk.

      https://census.daybreakgames.com/get/global/game_server_status?game_code=ps2&c:limit=10

      ### Static vs. Dynamic Zones

      The `zone` collection contains the IDs of all persistent zones, such as the main continents
      and VR training instances.


      When monitoring player activity via the ESS API, you will encounter additional zone IDs that
      are not present in the `zone` collection. These are temporary or instanced zones that are
      created and destroyed dynamically, such as tutorial or Sanctuary, or the various Desolation
      or Nexus instances during Outfit Wars.


      For details on interpreting dynamic zone IDs, refer to the [Zone ID
      Tutorial](https://github.com/cooltrain7/Planetside-2-API-Tracker/wiki/Tutorial:-Zone-IDs) on
      GitHub.
    name: Basics
  - description: >
      Collections related to PlanetSide 2 outfits and outfit membership.

      ### Outfit Lookup

      As with the `character` collection, outfit names and tags are case-insensitive. When looking
      up an outfit by name or tag, it is preferable to transform your search query to a lowercase
      string and compare it against the `outfit.name_lower` or `outfit.alias_lower` fields.
      Case-insensitive queries against the `outfit.name` or `outfit.alias` fields are possible, but
      may be significantly slower.

      ### Outfit Resources

      The outfit resources introduced in the Escalation update are not available via the Census
      API.

      However, some information about outfit resource use can be obtained through the
      `GuildBankWithdrawal` context of the `ItemAdded` event. For additional information, please
      refer to the [Outfit Assets](https://github.com/cooltrain7/Planetside-2-API-Tracker/wiki/Stream:Outfit-Assets)
      section of the [PS2 API Tracker Wiki](https://github.com/cooltrain7/Planetside-2-API-Tracker/wiki).
    name: Player Outfits
  - description: |
      Player statistics such as kills, deaths, and score.

      Refer to the `stat_name` parameter of the individual endpoints for a list of supported
      statistics. Note that some `stat_name` values are only available in combination with certain
      profiles.

      > **Note:** There is no accuracy statistic in any of these collections, it must be calculated
      from the `fire_count / hit_count` ratio. Likewise, headshot ratio must be calculated from
      `weapon_headshots / weapon_kills`. Also consider sanitizing the kills by not considering
      vehicles for the headshot ratio: `weapon_headshots / (weapon_kills - weapon_vehicle_kills)`.

      ### Collection Overview

      The following overview provides a brief description of the different endpoints and what kinds
      of statistics they contain:

      - `characters_stat`: Play time, total deaths, medals, and score
      - `characters_weapon_stat`: Damage given and taken, kills and deaths per faction
      - `character_stat_history`: Select statistics over time, essentially those found in the
        in-game stat history tab
      - `characters_weapon_stat`: Per-weapon accuracy, score, and playtime
      - `characters_weapon_stat_by_faction`: Per-weapon kills, deaths, and headshots

      > **Note:** Consider using the `single_character_by_id` endpoint when working with individual
      players' statistics. It contains most of the statistics available in the individual endpoints
      and is generally much faster to retrieve.
    name: Statistics
  - description: >
      Leaderboard entries for the top 10'000 players in each leaderboard category.


      The `leaderboard` endpoint covers the top 10'000 players, while the `characters_leaderboard`
      endpoint allows retrieving the position of a specific character within a leaderboard.


      Note that the `characters_leaderboard` endpoint will not return a result if the character is
      not in the top 10'000 for the given leaderboard category. In this case, the endpoint will
      return an empty result set.
    name: Leaderboards
  - description: >
      Collections related to item enumeration and availability, as well as the in-game depot.


      This section covers the item side of weapons and attachments: their names, descriptions,
      icons, and type. Weapon information, attachment modifiers, and firing mechanics are covered
      separately.

      ### Depot Bundles

      The `marketing_bundle` and `marketing_bundle_with_1_item` collections contain information
      about all bundles that have been available in the depot, including ones that are currently
      unavailable, such as seasonal bundles.


      There is no endpoint for retrieving current bundle availability, sales, or discounts.
    name: Items & Bundles
  - description: |
      Weapon and firing mechanics data, including fire modes, projectiles, and ammo types.

      > **Note:** Be wary of the `weapon_datasheet` collection as it has a tendency to contain
        outdated or incorrect information. It is therefore considered deprecated by this
        documentation, and suggestions for alternatives for the information it provides are
        provided as part of its schema documentation.

      This documentation only provides an overview of the available data and basic information on
      how to interpret it. If you are looking for a comprehensive write-up on weapon mechanics and
      hidden stats, please refer to the following resources instead:

      - [Weapon Mechanics | PlanetSide 2 Wiki](https://planetside.fandom.com/wiki/Weapon_Mechanics)
      - [PlanetSide 2 Weapon Mechanics | CMDRCyrious.com](http://cmdrcyrious.com/planetside2/weapons/weapon-mechanics/)
    name: Weapons & Firing Mechanics
  - description: >
      Collections related to vehicles, attachments, and vehicle certifications.
    name: Vehicles
  - description: >
      Armor values and resistances used for damage calculation.
    name: Damage Calculation
  - description: >
      Collections related to abilities, passive effects, and character resources.

      ### Abilities

      Abilities are cast by players or deployable entities such as shield emitters. Many abilities
      consume resources while they are active, such as the Heavy Assault's overshield energy or
      the Infiltrators "Cloaker Juice".

      ### Effects vs. Zone Effects

      The `effect` collection primarily covers one-off effects tied to weapon fire modes, such as
      direct damage, splash damage, and EMP effects.


      The `zone_effect` collection handles persistent effects, such as the passive (de)buffs
      applied by weapon attachments and implants.
    name: Effects & Abilities
  - description: >
      Collections related to certification trees and A.S.P. skills.

      Note that A.S.P. tokens are treated as a currency and have been injected into the response
      for the `characters_currency` collection, next to Nanites.
    name: Certifications & A.S.P.
  - description: >
      Collections related to in-game progression, such as directives, medals, and service ribbons.
    name: Progression
  - description: >
      Collections related to map rendering, such as facility types, lattice
      links, and map hexes.
    name: Map Data
  - description: >
      Image sets, icons and other assets available through the static `/files/`
      path.
    name: Image Assets
  - description: >
      Endpoints related to in-game alerts, outfit wars, and other large-scale
      events.
    name: Metagame & Alerts
  - description: >
      ReST interface for in-game events, such as kills, deaths, and battle
      rank gains.
    name: Event History
