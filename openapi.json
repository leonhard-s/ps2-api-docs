{
  "openapi": "3.1.0",
  "info": {
    "title": "PlanetSide 2 API",
    "summary": "Public API for PlanetSide 2 community developers",
    "description": "Unofficial API specification for [PlanetSide 2](https://www.planetside2.com/) as made available through the [Daybreak Game Company Census API](https://census.daybreakgames.com/).\n\nThese API specs are not affiliated with Daybreak Game Company, Rogue Planet Games, or the PlanetSide 2 developer team and come with absolutely no warranty.",
    "termsOfService": "https://census.daybreakgames.com#services-api-policy",
    "contact": {
      "name": "Project Homepage",
      "url": "https://github.com/leonhard-s/ps2-api-docs"
    },
    "version": "0.3"
  },
  "jsonSchemaDialect": "https://spec.openapis.org/oas/3.1/dialect/base",
  "externalDocs": {
    "description": "Official documentation for the documentation for the PlanetSide 2 API.",
    "url": "https://census.daybreakgames.com/"
  },
  "servers": [
    {
      "url": "https://census.daybreakgames.com",
      "description": "Casual-use Daybreak Games endpoint, throttled to 10 requests per minute and IP address"
    },
    {
      "url": "https://census.daybreakgames.com/{serviceId}",
      "description": "Production Daybreak Games endpoint, with service ID",
      "variables": {
        "serviceId": {
          "enum": [
            "s:example"
          ],
          "default": "s:example",
          "description": "Unique string used to identify a given consumer on the API. The default value of `s:example` underlies the same rate limits as the endpoint without service ID information. A custom service ID can be requested via [this form](https://census.daybreakgames.com/#devSignup)."
        }
      }
    },
    {
      "url": "https://census.lithafalcon.cc",
      "description": "Unofficial Community endpoint for static data.\nVisit the project URL for details."
    }
  ],
  "tags": [
    {
      "name": "Game-Agnostic Endpoints",
      "description": "Generic documentation of the Census API endpoints available for all games. The PlanetSide 2 endpoints are listed separtely to provide more detail, but they generally also support the full set of query parameters and commands list here. For a list of exceptions, see the [\"Special\" PS2 Collections](https://census.daybreakgames.com/#special-collections) section of the Census API documentation."
    },
    {
      "name": "Character Information",
      "description": "Collections related to PlanetSide 2 character information and lookups."
    },
    {
      "name": "Basics",
      "description": "General information about factions, classes, continents, and servers in PlanetSide 2."
    },
    {
      "name": "Player Outfits",
      "description": "Collections related to PlanetSide 2 outfits and outfit membership."
    },
    {
      "name": "Statistics",
      "description": "Collections concerning character statistics for weapon, classes, or vehicles."
    },
    {
      "name": "Leaderboards",
      "description": "Global or server-wide leaderboards for select statistics."
    },
    {
      "name": "Items & Bundles",
      "description": "Collections related to item enumeration and availability, as well as the in-game depot."
    },
    {
      "name": "Weapons & Firing Mechanics",
      "description": "Weapon and firing mechanics data, including fire modes, projectiles, and ammo types."
    },
    {
      "name": "Vehicles",
      "description": "Collections related to vehicles, attachments, and vehicle certifications."
    },
    {
      "name": "Damage Calculation",
      "description": "Armor values and resistances."
    },
    {
      "name": "Effects & Abilities",
      "description": "Collections related to abilities, effects, their types and consumed resources."
    },
    {
      "name": "Certifications & A.S.P.",
      "description": "Collections related to certification trees and A.S.P. skills."
    },
    {
      "name": "Progression",
      "description": "Collections related to in-game progression, such as directives, weapon medals, titles, and service ribbons."
    },
    {
      "name": "Map Data",
      "description": "Collections related to map rendering, such as facility types, lattice links, and map hexes."
    },
    {
      "name": "Image Assets",
      "description": "Image sets, icons and other assets available through the static `/files/` path."
    },
    {
      "name": "Metagame & Alerts",
      "description": "Endpoints related to in-game alerts, outfit wars, and other large-scale events."
    },
    {
      "name": "Event History",
      "description": "ReST interface for in-game events, such as kills, deaths, and battle rank gains."
    }
  ],
  "security": [],
  "paths": {
    "/get/{game}": {
      "get": {
        "summary": "Listing available collections",
        "description": "Return a list of all collections available for the current game namespace.\n\nThe keys in the entries' `resolve_list` field can be passed to the `c:resolve` parameter when accessing the respective collection to insert additional data into the response payload.\n\nNote that while the examples only show a single record, this endpoint cannot be filtered and always returns all results.",
        "tags": [
          "Game-Agnostic Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "datatype_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/datatype.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "character": {
                    "value": {
                      "$ref": "examples/datatype_character.json"
                    }
                  },
                  "outfitMember": {
                    "value": {
                      "$ref": "examples/datatype_outfitMember.json"
                    }
                  },
                  "characterOnlineStatus": {
                    "value": {
                      "$ref": "examples/datatype_characterOnlineStatus.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/count/{game}/{collection}": {
      "get": {
        "summary": "Get the number of records in a collection",
        "description": "Instead of returning the given results directly, this endpoint returns the number of results.\n\nThis is especially useful for large collections which cannot be fetched in full, such as `ps2/character`. This endpoint still supports filtering by parameters, as well as some query commands such as `c:has`.\n\nConsumers may also want to query the result count for a given query before fetching to decide whether to paginate the response.",
        "tags": [
          "Game-Agnostic Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/collectionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "value": {
                      "$ref": "examples/count_success.json"
                    }
                  },
                  "error": {
                    "value": {
                      "$ref": "examples/count_error.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/{collection}": {
      "get": {
        "summary": "Retrieve results from a collection",
        "description": "This endpoint documents generic parameters available on most collections. For details on collection-specific variables and response schemas, please see the respective collection's query entry.",
        "tags": [
          "Game-Agnostic Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/collectionParam"
          },
          {
            "$ref": "#/components/parameters/qcShowParam"
          },
          {
            "$ref": "#/components/parameters/qcHideParam"
          },
          {
            "$ref": "#/components/parameters/qcSortParam"
          },
          {
            "$ref": "#/components/parameters/qcHasParam"
          },
          {
            "$ref": "#/components/parameters/qcResolveParam"
          },
          {
            "$ref": "#/components/parameters/qcCaseParam"
          },
          {
            "$ref": "#/components/parameters/qcLimitParam"
          },
          {
            "$ref": "#/components/parameters/qcLimitPerDbParam"
          },
          {
            "$ref": "#/components/parameters/qcStartParam"
          },
          {
            "$ref": "#/components/parameters/qcIncludeNullParam"
          },
          {
            "$ref": "#/components/parameters/qcLangParam"
          },
          {
            "$ref": "#/components/parameters/qcJoinParam"
          },
          {
            "$ref": "#/components/parameters/qcTreeParam"
          },
          {
            "$ref": "#/components/parameters/qcTimingParam"
          },
          {
            "$ref": "#/components/parameters/qcExactMatchFirstParam"
          },
          {
            "$ref": "#/components/parameters/qcDistinctParam"
          },
          {
            "$ref": "#/components/parameters/qcRetryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "{collection}_list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "timing": {
                      "type": "object",
                      "summary": "Only included if `c:timing` is enabled.",
                      "properties": {
                        "total-ms": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "characterInfo": {
                    "value": {
                      "$ref": "examples/collection_characterInfo.json"
                    }
                  },
                  "factionTags": {
                    "value": {
                      "$ref": "examples/collection_factionTags.json"
                    }
                  },
                  "mapFacilities": {
                    "value": {
                      "$ref": "examples/collection_mapFacilities.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/ability": {
      "get": {
        "summary": "Ability",
        "description": "An ability triggered by a character or vehicle.\n\nAbilities in the API are more generic than the in-game abilities and also cover other mechanics such as scopes and consumables.\n\nThe generic fields `paramX` and `stringX` are documented in the the corresponding `ps2/ability_type` entry.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/abilityIdParam"
          },
          {
            "$ref": "#/components/parameters/abilityTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ability_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/ability.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ability": {
                    "value": {
                      "$ref": "examples/ability.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/ability_type": {
      "get": {
        "summary": "Ability Type",
        "description": "A type of ability.\n\nThe generic fields `paramX` and `stringX` are documented here. Note that most of these generic fields are currently not used.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/abilityTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ability_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/ability_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ability_type": {
                    "value": {
                      "$ref": "examples/ability_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/achievement": {
      "get": {
        "summary": "Achievements",
        "description": "Endpoint for weapon medals and service ribbons.\n\nThere is no \"achievement type\" collection or field, but they can be grouped by the `repeatable` field, which is only true for service ribbons.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/achievementIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "achievement_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/achievement.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "medals": {
                    "value": {
                      "$ref": "examples/achievement_medals.json"
                    }
                  },
                  "ribbon": {
                    "value": {
                      "$ref": "examples/achievement_ribbon.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/character": {
      "get": {
        "summary": "Character",
        "description": "Game-specific documentation for the `character` collection.\n\nThis collection is randomly distributed across 20 different databases, causing some unusual behaviour when filtering. For example, the `c:distinct` parameter will fetch the distinct values for each database and aggregate them in the response, resulting in duplicate entries. This and other special cases are documented with the corresponding query command parameters in the `General` section.\n\nIn addition to the commonly-used parameters provided, this endpoint may be queried by any of its fields, including sub-keys like `times.creation`.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/qcLimitPerDbParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstLowerParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "character_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/character.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/character_higby.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/currency": {
      "get": {
        "summary": "Currency",
        "description": "Lists currencies available in the game.\n\nAs of 2023-06-13, the only currency available are Nanites. Outfit resources and other currencies such as Daybreak Cash, ISO-4, or A7 are not available on the API, while Cert Points and A.S.P. tokens are stored in the `character` collection.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/currencyIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currency_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/currency.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "nanites": {
                    "value": {
                      "$ref": "examples/currency.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/armor_facing": {
      "get": {
        "summary": "Armor Facing",
        "description": "Enumerates the armor facing angles used for directional damage reduction on vehicles.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/armorFacingIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "armor_facing_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/armor_facing.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "armor_facing": {
                    "value": {
                      "$ref": "examples/armor_facing.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/armor_info": {
      "get": {
        "summary": "Armor Info",
        "description": "A set of armor values for each armor facing angle on a vehicle.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/armorInfoIdParam"
          },
          {
            "$ref": "#/components/parameters/armorFacingIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "armor_info_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/armor_info.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "armor_info": {
                    "value": {
                      "$ref": "examples/armor_info.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/character_name": {
      "get": {
        "summary": "Character Name",
        "description": "Optimized, low-bandwidth endpoint for character name resolution.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstLowerParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "character_name_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/character_name.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/character_name_higby.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_achievement": {
      "get": {
        "summary": "Character Achievements",
        "description": "List the achievement progress for a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/achievementIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_achievement_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_achievement.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "medal": {
                    "value": {
                      "$ref": "examples/characters_achievement_medal.json"
                    }
                  },
                  "ribbon": {
                    "value": {
                      "$ref": "examples/characters_achievement_ribbon.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_currency": {
      "get": {
        "summary": "Character Currency",
        "description": "Lists the currencies owned by a character.\n\nNote that this table has been inconsistent since the introduction of the A.S.P. system: in addition to the currency value (Nanites), an extra `prestige_currency` key has been added, rather than being its own currency.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/currencyIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_currency_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_currency.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "currency": {
                    "value": {
                      "$ref": "examples/characters_currency.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_directive": {
      "get": {
        "summary": "Character Directives",
        "description": "Directive completion information for a character.\n\nNote that this also lists entries for incomplete directives; use the `completion_time` field to determine whether a directive has been completed.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_directive_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_directive.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "directive": {
                    "value": {
                      "$ref": "examples/characters_directive.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_directive_objective": {
      "get": {
        "summary": "Character Directive Objectives",
        "description": "Current progress of a character within a directive.\n\nThe current value of the directive progress can be found in the `state_data` field of this endpoint. The corresponding target value is found in the corresponding `objective`, usually in the `param1` field.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveIdParam"
          },
          {
            "$ref": "#/components/parameters/objectiveIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_directive_objective_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_directive_objective.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "directive_objective": {
                    "value": {
                      "$ref": "examples/characters_directive_objective.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_directive_tier": {
      "get": {
        "summary": "Character Directive Tier",
        "description": "Directive tier completion information for a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTierIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_directive_tier_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_directive_tier.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "directive_tier": {
                    "value": {
                      "$ref": "examples/characters_directive_tier.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_directive_tree": {
      "get": {
        "summary": "Character Directive Tree",
        "description": "Directive tree completion information for a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_directive_tree_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_directive_tree.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "directive_tree": {
                    "value": {
                      "$ref": "examples/characters_directive_tree.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_event": {
      "get": {
        "summary": "Character Event",
        "description": "ReST endpoint for retrieving historical character event data.\n\nLike `event`, but allows querying by character. The `character_id` and `id` fields are interchangeable.",
        "tags": [
          "Event History"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterEventCharacterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterEventTypeParam"
          },
          {
            "$ref": "#/components/parameters/beforeParam"
          },
          {
            "$ref": "#/components/parameters/afterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_event_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_event.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_event_grouped": {
      "get": {
        "summary": "Grouped Character Event",
        "description": "Return character vs. character statistics.\n\nAllows calculating player vs. player KDR.",
        "tags": [
          "Event History"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterEventsGroupedEventTypeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_event_grouped_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_event_grouped.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_friend": {
      "get": {
        "summary": "Friends List",
        "description": "Query the friends list of a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_friend_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_friend.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_friend.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_item": {
      "get": {
        "summary": "Character Items",
        "description": "Query the items of a character. Note that this collection no longer lists account-wide item unlocks as this served as a fingerprint to identify players across multiple characters.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_item.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_item.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_leaderboard": {
      "get": {
        "summary": "Character Leaderboard",
        "description": "Query the leaderboard for a character. Note that only the top 10'000 players for a given statistic are tracked in the leaderboard; many characters will not have an entry in this collection.\n\nThe `limit` key inserted into the response indicates the number of requested entries when passing multiple character IDs. Comparison with `returned` may be used to determine whether any characters were skipped due to not being in the leaderboard.",
        "tags": [
          "Leaderboards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardCharacterIdParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardNameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardPeriodParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "characters_leaderboard_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/leaderboard.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "key": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_online_status": {
      "get": {
        "summary": "Online Status",
        "description": "Query the online status of a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_online_status_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_online_status.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_online_status.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_skill": {
      "get": {
        "summary": "Character Skills",
        "description": "List the skills unlocked by a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/skillIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_skill_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_skill.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_skill.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_stat": {
      "get": {
        "summary": "Character Statistics",
        "description": "Basic statistics endpoint for character-wide and class-specific statistics.\n\n- `stat_name` lists the name of the stat\n- `profile` represents the class, with a value of 0 denoting a character-wide value",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_stat"
          },
          {
            "$ref": "#/components/parameters/profileIdParam_character"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_stat_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_stat.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_stat.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_stat_by_faction": {
      "get": {
        "summary": "Character Statistics by Faction",
        "description": "Faction-specific statistics endpoint. Useful for determining faction bias or kill spread.\n\n- `stat_name` lists the name of the stat\n- `profile` represents the class, with a value of 0 denoting a character-wide value\n\nAll `value_*` fields are provided per-faction. Note that the value for the own faction is often blanked: `value_nc` of the stat `kills` cannot be used to enumerate an NC character's team kills, for example.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_stat_by_faction"
          },
          {
            "$ref": "#/components/parameters/profileIdParam_character"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_stat_by_faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_stat_by_faction.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_stat_by_faction.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_stat_history": {
      "get": {
        "summary": "Historical Statistics",
        "description": "Statistics endpoint for historical character stats. In addition to the `all_time` and `one_life_max` keys, values are also provided for the last 31 days (`day`), 12 months (`month`), or 13 weeks (`week`).\n\n- `stat_name` lists the name of the stat\n- `profile` represents the class, with a value of 0 denoting a character-wide value.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_stat_history"
          },
          {
            "$ref": "#/components/parameters/profileIdParam_character"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_stat_history_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_stat_history.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_stat_history.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_weapon_stat": {
      "get": {
        "summary": "Weapon Statistics",
        "description": "Weapon statistics endpoint containing generic values such as playtime or score while wielding. The most common use is calculating the accuracy of a player with a given weapon by dividing `weapon_hit_count` by `weapon_fire_count`.\n\n- `stat_name` lists the name of the stat\n- `item_id` identifies the item for the weapon. Note that this value can be zero, in that case it serves as a catch-all for all weapons for the given `vehicle_id`.\n- `vehicle_id` the vehicle on which the weapon is available.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_weapon_stat"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_weapon_stat_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_weapon_stat.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "weapon": {
                    "value": {
                      "$ref": "examples/characters_weapon_stat_infantry_weapon.json"
                    }
                  },
                  "vehicle": {
                    "value": {
                      "$ref": "examples/characters_weapon_stat_vehicle.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_weapon_stat_by_faction": {
      "get": {
        "summary": "Weapon Statistics By Faction",
        "description": "Faction-specific weapon statistics endpoint containing combat-focussed stats such as kills, deaths, headshots and damage dealt/taken.\n\n- `stat_name` lists the name of the stat\n- `item_id` identifies the item for the weapon. Note that this value can be zero, in that case it serves as a catch-all for all weapons for the given `vehicle_id`.\n- `vehicle_id` the vehicle on which the weapon is available.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_weapon_stat_by_faction"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_weapon_stat_by_faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_weapon_stat_by_faction.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "weapon": {
                    "value": {
                      "$ref": "examples/characters_weapon_stat_by_faction_infantry_weapon.json"
                    }
                  },
                  "vehicle": {
                    "value": {
                      "$ref": "examples/characters_weapon_stat_by_faction_vehicle.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_world": {
      "get": {
        "summary": "Character Server Lookup",
        "description": "Query the server a character is on.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_world_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/characters_world.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/characters_world.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/directive": {
      "get": {
        "summary": "Directive",
        "description": "An individual directive that may be completed by a player.\n\nThis collection lists an individual directive, such as \"100 Roadkills\".",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/directiveIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTierIdParam"
          },
          {
            "$ref": "#/components/parameters/objectiveSetIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "directive_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/directive.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/directive.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/directive_tier": {
      "get": {
        "summary": "Directive Tier",
        "description": "A completion tier within a directive tree.\n\nThis covers the individual stages of directive tiers, such as \"Combat Medic: Adept\".",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTierIdParam"
          },
          {
            "$ref": "#/components/parameters/rewardSetIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "directive_tier_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/directive_tier.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/directive_tier.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/directive_tree": {
      "get": {
        "summary": "Directive Tree",
        "description": "A tree of directives sorted into multiple tiers.\n\nThis collection represents the individual paths within a directive category, such as \"Light Assault\" or \"Combat Medic\".",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeIdParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeCategoryIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "directive_tree_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/directive_tree.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/directive_tree.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/directive_tree_category": {
      "get": {
        "summary": "Directive Tree Category",
        "description": "Top-level categorisation of directive trees.\n\nThis covers the main sections in the Directive menu, such as \"Infantry\", \"Vehicles\", or \"Events\".",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/directiveTreeCategoryIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "directive_tree_category_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/directive_tree_category.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/directive_tree_category.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/empire_scores": {
      "get": {
        "summary": "(Defunct) Empire Scores",
        "description": "Defunct endpoint for the \"World Domination Series\" event scores.",
        "tags": [
          "Metagame & Alerts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "empire_scores_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/empire_scores.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "value": {
                      "$ref": "examples/empire_scores.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/effect": {
      "get": {
        "summary": "Effect",
        "description": "A weapon-based effect acting on players or vehicles.\n\nWeapon-based effects include direct and indirect damage effects, tactical grenade impacts, as well as pseudo-weapons such as the Medic tool or Engineer repair tool. For world-based effects, weapon attachments and buffs, see the `ps2/zone_effect` collection instead.\n\nSee the `ps2/effect_type` collection for a list of available effect types.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/effectIdParam"
          },
          {
            "$ref": "#/components/parameters/effectTypeIdParam"
          },
          {
            "$ref": "#/components/parameters/abilityIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "effect_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/effect.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "effect": {
                    "value": {
                      "$ref": "examples/effect.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/effect_type": {
      "get": {
        "summary": "Effect Type",
        "description": "A type of effect.\n\nThe generic fields `paramX` and `stringX` are documented here. Note that not all fields are used by all effect types, or at all.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/effectTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "effect_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/effect_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "effect_type": {
                    "value": {
                      "$ref": "examples/effect_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/event": {
      "get": {
        "summary": "Event",
        "description": "ReST endpoint for retrieving historical event data.\n\nThese largely mirror the corresponding events in the ESS:\n\n- `ItemAdded` -> `ITEM`\n- `Death` -> `KILL`/`DEATH`\n- `BattleRankUp` -> `BATTLE_RANK`\n- `PlayerFacilityCapture`/`PlayerFacilityDefend` -> `FACILITY_CHARACTER`\n- `AchievementEarned` -> `ACHIEVEMENT`\n- `FacilityControl` -> `FACILITYCONTROL`\n- `MetagameEvent` -> `METAGAME`",
        "tags": [
          "Event History"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/eventTypeParam"
          },
          {
            "$ref": "#/components/parameters/beforeParam"
          },
          {
            "$ref": "#/components/parameters/afterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/event.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/experience": {
      "get": {
        "summary": "Experience",
        "description": "Lists the different types of experience ticks.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/experienceIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "experience_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/experience.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "experience": {
                    "value": {
                      "$ref": "examples/experience.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/experience_rank": {
      "get": {
        "summary": "Experience Rank",
        "description": "Player rank gained through leveling up.\n\nNote that the `rank` field is not unique, as each rank is duplicated for each prestige (aka. A.S.P.) level. The prestige entries can only be distinguished by their icons.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "experience_rank_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/experience_rank.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "experience_rank": {
                    "value": {
                      "$ref": "examples/experience_rank.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/facility_link": {
      "get": {
        "summary": "Facility Link",
        "description": "Resolves lattice links between facilities.\n\nThere is no reliable difference between `facility_id_a` and `facility_id_b`; the former tends to be closer to the respective warpgate, but this does not hold true for all links. It is recommended to treat the link direction as arbitrary.",
        "tags": [
          "Map Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/facilityIdAParam"
          },
          {
            "$ref": "#/components/parameters/facilityIdBParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "facility_link_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/facility_link.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "facility_link": {
                    "value": {
                      "$ref": "examples/facility_link.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/facility_type": {
      "get": {
        "summary": "Facility Type",
        "description": "Lists all facility types across all zones and game modes.",
        "tags": [
          "Map Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/facilityTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "facility_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/facility_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "facility_type": {
                    "value": {
                      "$ref": "examples/facility_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/faction": {
      "get": {
        "summary": "Faction",
        "description": "Playable and NPC factions.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/factionIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/faction.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "tr": {
                    "value": {
                      "$ref": "examples/faction.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/fire_group": {
      "get": {
        "summary": "Fire Group",
        "description": "Fire groups in the API are synonymous with fire modes in-game, they represent the different operating modes some weapons can switch between.\n\nThis includes select-fire modes for infantry weapons, as well as knives switching between quick knife, wielded knive, and - in the case of power knives - the one-hit-kill mode.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/fireGroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fire_group_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/fire_group.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "chamber": {
                    "value": {
                      "$ref": "examples/fire_group_chamber.json"
                    }
                  },
                  "regular": {
                    "value": {
                      "$ref": "examples/fire_group_regular.json"
                    }
                  },
                  "spool": {
                    "value": {
                      "$ref": "examples/fire_group_spool.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/fire_mode": {
      "get": {
        "summary": "Fire Mode (Legacy)",
        "description": "**Note:** This table has been largely superceded by `ps2/fire_mode_2`, which contains additional and more accurate information about firing mechanics.\n\nThis endpoint shows detailed information about a given fire mode for a weapon, including damage ranges, muzzle velocity, and reload time.\n\nFor details on the cone-of-fire mechanics, resolve the `player_state_group_id` field.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/fireModeIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fire_mode_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/fire_mode.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fire_mode": {
                    "value": {
                      "$ref": "examples/fire_mode.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/fire_mode_2": {
      "get": {
        "summary": "Fire Mode",
        "description": "Main endpoint for baseline weapon characteristics and firing mechanics. This includes:\n\n- Damage effects and ranges\n- Recoil magnitude and pattern\n- Triggered abilities for pseudo-weapons such as the medical applicator\n- Ammunition consumption and pellet count\n- Heat-mechanics\n\nBe aware that lockon information is currently disconnected from the game data and has not been outdated. Refer to the PS2 Wiki for up-to-date information for the time being.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/fireModeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fire_mode_2_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/fire_mode_2.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "NS-11A": {
                    "value": {
                      "$ref": "examples/fire_mode_2_ns11a.json"
                    }
                  },
                  "Lasher X2": {
                    "value": {
                      "$ref": "examples/fire_mode_2_lasherx2.json"
                    }
                  },
                  "HAWK GD-68": {
                    "value": {
                      "$ref": "examples/fire_mode_2_hawkgd68.json"
                    }
                  },
                  "Betelgeuse 54-A": {
                    "value": {
                      "$ref": "examples/fire_mode_2_betelgeuse54a.json"
                    }
                  },
                  "G30 Vulcan": {
                    "value": {
                      "$ref": "examples/fire_mode_2_g30vulcan.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/fire_mode_to_projectile": {
      "get": {
        "summary": "Fire Mode to Projectile",
        "description": "Maps fire modes to their projectiles.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/fireModeIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fire_mode_to_projectile_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/fire_mode_to_projectile.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fire_mode_to_projectile": {
                    "value": {
                      "$ref": "examples/fire_mode_to_projectile.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/fire_mode_type": {
      "get": {
        "summary": "Fire Mode Type",
        "description": "Enumeration of the types of fire modes.\n\nThis servers to differentiate between melee attacks, projectile weapons, throwables, and pseudo-weapon fire modes used to trigger activated items.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/fireModeTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fire_mode_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/fire_mode_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fire_mode_type": {
                    "value": {
                      "$ref": "examples/fire_mode_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/image": {
      "get": {
        "summary": "Image",
        "description": "Lists individual image assets available on the API.\n\nNote that historically, not all assets listed here are available on the image endpoint, and not all available assets are listed.",
        "tags": [
          "Image Assets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/imageIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "image_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/image.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "image": {
                    "value": {
                      "$ref": "examples/image.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/image_set": {
      "get": {
        "summary": "Image Set",
        "description": "Lists related image assets belonging to the same set.\n\nNote that this endpoint is a mapping; the `iamge_set_id` is not a unique key. The individual image types in a set are generally used to provide different sizes of the same image (e.g. icon previes or minimal icons).",
        "tags": [
          "Image Assets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/imageSetIdParam"
          },
          {
            "$ref": "#/components/parameters/imageIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "image_set_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/image_set.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "image_set": {
                    "value": {
                      "$ref": "examples/image_set.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/image_set_default": {
      "get": {
        "summary": "Image Set Default",
        "description": "Lists the default image for a given image set.",
        "tags": [
          "Image Assets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/imageSetIdParam"
          },
          {
            "$ref": "#/components/parameters/imageIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "image_set_default_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/image_set_default.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "image_set_default": {
                    "value": {
                      "$ref": "examples/image_set_default.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item": {
      "get": {
        "summary": "Items",
        "description": "Items in PlanetSide 2 are used to represent weapons, tools, and consumables, but also cosmetic items and internal control objects for player renaming or outfit resource consumption. Use the `item_type` collection to narrow searches to specific types.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/item.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "value": {
                      "$ref": "examples/item.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_attachment": {
      "get": {
        "summary": "Item Attachments",
        "description": "Maps attachment items to the items they can be attached to.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_attachment_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/item_attachment.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "value": {
                      "$ref": "examples/item_attachment.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_category": {
      "get": {
        "summary": "Item Categories",
        "description": "Item categories are used to group items together for display in the loadout screen or depot.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemCategoryIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_category_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/item_category.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "value": {
                      "$ref": "examples/item_category.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_profile": {
      "get": {
        "summary": "Item-Class Mapping",
        "description": "Maps items to profiles (classes/vehicles) that have access to them.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_profile_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/item_profile.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "value": {
                      "$ref": "examples/item_profile.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_to_weapon": {
      "get": {
        "summary": "Item-Weapon Mapping",
        "description": "Maps items (including name, availability) to its respective weapon object\n\nNot all items have a weapon objects, though some filtering can be done through the `item_type_id` field, with the ID 26 representing most weapon types.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_to_weapon_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/item_to_weapon.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "value": {
                      "$ref": "examples/item_to_weapon.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_type": {
      "get": {
        "summary": "Item Types",
        "description": "Items in PlanetSide 2 represent many different things beyond weapons, such as implant packs, cosmetics, or name change tokens. They are also used as internal helpers when pulling outfit resources, spawning vehicles, or interacting with certain terminals.\n\nThis collection lists the different item types, though many of these are never encountered on the API.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/item_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "value": {
                      "$ref": "examples/item_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/leaderboard": {
      "get": {
        "summary": "Global Leaderboard",
        "description": "Global leaderboard for a given server. This only includes the top 10'000 players for a given category and is not directly searchable. See `characters_leaderboard` to look up a character's ranking.\n\n`c:start` and `c:limit` are supported and allow for pagination. `c:join` and `c:tree` are also permitted. Any other query commands will be silently ignored.\n\nUnlike most other tables, this one defaults to a `c:limit` value of 10 and is always sorted in ascending order of leaderboard rank.",
        "tags": [
          "Leaderboards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardNameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardPeriodParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leaderboard_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/leaderboard.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "key": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "cobalt_all_time_kills": {
                    "value": {
                      "$ref": "examples/leaderboard.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/loadout": {
      "get": {
        "summary": "Loadout",
        "description": "Enumeration of the six infantry classes for each playable faction.\n\nNote that this is different from the in-game loadouts, which are not available on the API.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/loadoutIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "loadout_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/loadout.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ncInfiltrator": {
                    "value": {
                      "$ref": "examples/loadout.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/map": {
      "get": {
        "summary": "Map",
        "description": "Map status endpoint.\n\nThis collection can only be queried with a single `world_id` and any number of `zone_ids` (note that the parameter is plural). Also note the non-standard payload format requiring different parsing rules.\n\nFor partially locked continents, the unavailable regions will report a `FactionId` of zero.",
        "tags": [
          "Map Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          },
          {
            "name": "zone_ids",
            "in": "query",
            "description": "Unique identifier of a zone.",
            "schema": {
              "type": "string"
            },
            "x-cast-to": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "map_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/map.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "indar": {
                    "value": {
                      "$ref": "examples/map.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/map_hex": {
      "get": {
        "summary": "Map Hex",
        "description": "Endpoint for retrieving map hex coordinates.\n\nThis data can be used to reconstruct the in-game facility outlines from API data.\n\nThe X and Y coordinates listed in the entries to this collection are not Cartesian and do not match up with the `location_<n>` fields of `map_region`. Instead, they are describing locations in a non-orthogonal hexagonal grid, which must be converted by the user.\n\nThis website has a great write-up on hexagonal coordinate systems: <https://www.redblobgames.com/grids/hexagons/>\nThe coordinate system used by PlanetSide 2 matches the \"Axial coordinates\" described in the article, except that the first coordinate X faces east, and the second coordinate Y faces up and to the right at a 60\u00b0 angle.",
        "tags": [
          "Map Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/mapRegionIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "map_hex_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/map_hex.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "indar": {
                    "value": {
                      "$ref": "examples/map_hex.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/map_region": {
      "get": {
        "summary": "Map Region",
        "description": "A region on the in-game map.\n\nMap regions are largely identical to their corresponding regions, but use the internal `facility_name` instead of a localized string. A `map_region_id` and `region_id` are interchangeable.\n\nAdditionally, this collection allows connecting facilities to map region IDs.\n\nNote that the continuous outfit resource gain is listed in \"ticks\", not minutes. Ticks are 5 minutes as of writing, meaning that a Tech Plant will list a tick reward of 8 Synthium, corresponding to the 1.6 Synthium per minute advertised in-game.",
        "tags": [
          "Map Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/mapRegionIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "map_region_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/map_region.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "indar": {
                    "value": {
                      "$ref": "examples/map_region.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/marketing_bundle": {
      "get": {
        "summary": "Bundles",
        "description": "Bundles available for purchase in the in-game store (Depot). This collection represents actual bundles. For pseudo-bundles used to purchase individual weapon attachments or cosmetics, see the `marketing_bundle_with_1_item` collection instead.\n\nNote that there is no guaranteed way of determining whether a given bundle is currently available for purchase. This collection contains many entries for defunct items and bundles, such as the single-use camos from the early days of the game.\n\nThis collection is automatically maintained and generally accurate with regards to certification prices, the daybreak/station cash values are generally less reliable.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/marketingBundleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "marketing_bundle_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/marketing_bundle.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/marketing_bundle.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/marketing_bundle_item": {
      "get": {
        "summary": "Items Available in Bundles",
        "description": "Maps marketing bundles to the items they contain.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/marketingBundleIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "marketing_bundle_item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/marketing_bundle_item.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/marketing_bundle_item.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/marketing_bundle_with_1_item": {
      "get": {
        "summary": "Individual Item Bundles",
        "description": "These are pseudo-bundles with exactly 1 item each, allowing players to buy individual weapons or cosmetics with Daybreak Cash (formerly Station Cash).\n\nNote that in the case of weapons, these bundles are genreally mirrored by 'regular' bundles in the `ps2/marketing_bundle` collection, with the same `marketing_bundle_id`.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/marketingBundleIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "marketing_bundle_with_1_item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/marketing_bundle_with_1_item.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/marketing_bundle_with_1_item.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/metagame_event": {
      "get": {
        "summary": "Metagame Event",
        "description": "In-game alerts and other alert-like events.\n\nNote that this endpoint lists alert types that are not currently enabled in-game, such as the 'Aerial Anomaly' and 'MAXimum Pressure' alert types.",
        "tags": [
          "Metagame & Alerts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/metagameEventIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metagame_event_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/metagame_event.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/metagame_event.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/metagame_event_state": {
      "get": {
        "summary": "Metagame Event State",
        "description": "Enumeratess the available states for alerts.",
        "tags": [
          "Metagame & Alerts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/metagameEventStateIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metagame_event_state_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/metagame_event_state.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/metagame_event_state.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/objective": {
      "get": {
        "summary": "Objective",
        "description": "An objective tracking progress towards a directive, mission, or achievement.\n\nSee the `ps2/objective_type` collection for a list of available objective types.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/objectiveIdParam"
          },
          {
            "$ref": "#/components/parameters/objectiveTypeIdParam"
          },
          {
            "$ref": "#/components/parameters/objectiveGroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "objective_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/objective.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/objective.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/objective_set_to_objective": {
      "get": {
        "summary": "Objective Set Map",
        "description": "Maps objective sets to objective groups.\n\nThis collection is peculiar as neither of the types it connects are available on the API. It is however essential for connecting the `ps2/directive` collection to `ps2/objective` and `ps2/objective_type`.\n\nNote that when joining to these queries, the `^on:` and `^to:` fields must be used to specify the relationship.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/objectiveSetIdParam"
          },
          {
            "$ref": "#/components/parameters/objectiveGroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "objective_set_to_objective_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/objective_set_to_objective.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "value": {
                      "$ref": "examples/objective_set_to_objective.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/objective_type": {
      "get": {
        "summary": "Objective Type",
        "description": "A type of objective.\n\nThe generic `paramX` fields are documented here. Note that not all fields are used by all objective types, or at all.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/objectiveTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "objective_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/objective_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "capturePoint": {
                    "value": {
                      "$ref": "examples/objective_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit": {
      "get": {
        "summary": "Outfit",
        "description": "A player-run outfit or clan.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/outfit.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fno": {
                    "value": {
                      "$ref": "examples/outfit.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit_member": {
      "get": {
        "summary": "Outfit Member",
        "description": "Outfit membership information for a givne character. Characters that are not members of any outfit will not have an entry in this collection.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_member_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/outfit_member.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "luperza": {
                    "value": {
                      "$ref": "examples/outfit_member.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit_member_extended": {
      "get": {
        "summary": "Outfit Member (Extended)",
        "description": "Another variant of the `ps2/outfit_member` collection, but with the contents of the corresponding `ps2/outfit` merged in. This is useful for bulk lookups of outfit information for heterogenous lists of characters without requiring the explicit use of `c:join` or `c:resolve`.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_member_extended_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/outfit_member_extended.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "luperza": {
                    "value": {
                      "$ref": "examples/outfit_member_extended.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit_rank": {
      "get": {
        "summary": "Custom Outfit Rank",
        "description": "Outfits can define their own custom rank names and permissions, which are listed here. Outfits using the default rank names may not have an entry here.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_rank_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/outfit_rank.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fno": {
                    "value": {
                      "$ref": "examples/outfit_rank.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/profile": {
      "get": {
        "summary": "Profile (Infantry)",
        "description": "Original endpoint for infantry profiles. This covers the names and loadout IDs connected to a given profile, and additionally provides movement speed multiplier information for infantry classes. Note that the key fields are also provided by `ps2/profile_2`, which not only covers infantry but also vehicles, deployables, and other entities.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          },
          {
            "$ref": "#/components/parameters/loadoutIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/profile.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "trLightAssault": {
                    "value": {
                      "$ref": "examples/profile.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/profile_2": {
      "get": {
        "summary": "Profile (All)",
        "description": "Extended profile endpoint containing all entity types, including NPCs, construction items, and deployables.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile_2_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/profile_2.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "sunderer": {
                    "value": {
                      "$ref": "examples/profile_2.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/profile_armor_map": {
      "get": {
        "summary": "Profile Armor Map",
        "description": "Maps profiles to the relevant `ps2/armor_info` entries.\n\nNote that many of the IDs used here are only available in `ps2/profile_2`. Additionally, armor values only concern vehicles, with infantry and deployable classes not having any entries here.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/armorInfoIdParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile_armor_map_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/profile_armor_map.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "magrider": {
                    "value": {
                      "$ref": "examples/profile_armor_map.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/profile_resist_map": {
      "get": {
        "summary": "Profile Resist Map",
        "description": "Maps profiles to the relevant `ps2/resist_info` entries. Note that many of the profile IDs used here are only available in the `ps2/profile_2` collection.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/resistInfoIdParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile_resist_map_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/profile_resist_map.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "lightning": {
                    "value": {
                      "$ref": "examples/profile_resist_map.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/projectile": {
      "get": {
        "summary": "Projectiles",
        "description": "Projectiles specify the travel characteristics of a weapon on its way to the target, such as its speed, its bullet drop, or maximum flight time/distance.\n\nNote that multiple fire modes can use the same projectile. This usually includes the hipfire vs. aimed fire modes, but can also include different weapons altogether.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/projectileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectile_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/projectile.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "projectile": {
                    "value": {
                      "$ref": "examples/projectile.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/projectile_flight_type": {
      "get": {
        "summary": "Projectile Flight Type",
        "description": "Enumerates the flight types used to categorize projectiles by their travel characteristics.\n\nThis mostly controls whether the projectile is ballistic, Flak-based, or \"Dynamic\", used to represent thrown items such as grenades, explosives, and ammo packs.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/projectileFlightTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectile_flight_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/projectile_flight_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "projectile_flight_type": {
                    "value": {
                      "$ref": "examples/projectile_flight_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/region": {
      "get": {
        "summary": "Region",
        "description": "Display name of the game regions.\n\nThis endpoint mostly contains the localized display name of the a map region. Regions and map regions are interchangeable and governed by the same IDs.",
        "tags": [
          "Map Data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/regionIdParam"
          },
          {
            "$ref": "#/components/parameters/zoneIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "region_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/region.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "region": {
                    "value": {
                      "$ref": "examples/region.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/resist_info": {
      "get": {
        "summary": "Resist Info",
        "description": "Lists resistances against certain types of damage.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/resistInfoIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resist_info_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/resist_info.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "resist_info": {
                    "value": {
                      "$ref": "examples/resist_info.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/resist_type": {
      "get": {
        "summary": "Resist Types",
        "description": "Enumeration of resistance types used to balance damage types against various targets.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/resistTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resist_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/resist_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "resist_type": {
                    "value": {
                      "$ref": "examples/resist_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/resource_type": {
      "get": {
        "summary": "Resource Type",
        "description": "Resources consumed by abilities such as the Heavy Overshield.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/resourceTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/resource_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "resource_type": {
                    "value": {
                      "$ref": "examples/resource_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/reward": {
      "get": {
        "summary": "Reward",
        "description": "",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/rewardIdParam"
          },
          {
            "$ref": "#/components/parameters/rewardTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reward_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/reward.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "reward": {
                    "value": {
                      "$ref": "examples/reward.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/reward_group_to_reward": {
      "get": {
        "summary": "Reward Map",
        "description": "Maps a reward group to one or more rewards.\n\nThis collection, together with `reward_set_to_reward_group`, allows connecting directive tiers to the rewards they grant upon completion.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/rewardIdParam"
          },
          {
            "$ref": "#/components/parameters/rewardGroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reward_group_to_reward_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/reward_group_to_reward.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "reward_group_to_reward": {
                    "value": {
                      "$ref": "examples/reward_group_to_reward.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/reward_set_to_reward_group": {
      "get": {
        "summary": "Reward Set Map",
        "description": "Maps a reward set to its reward group.\n\nThis collection, together with `reward_group_to_reward`, allows connecting directive tiers to the rewards they grant upon completion.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/rewardSetIdParam"
          },
          {
            "$ref": "#/components/parameters/rewardGroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reward_set_to_reward_group_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/reward_set_to_reward_group.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "reward_set_to_reward_group": {
                    "value": {
                      "$ref": "examples/reward_set_to_reward_group.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/reward_type": {
      "get": {
        "summary": "Reward Type",
        "description": "A type of reward.\n\nThe generic `paramX` fields are documented here. Note that not all fields are used by all reward types, or at all.",
        "tags": [
          "Progression"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/rewardTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reward_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/reward_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "reward_type": {
                    "value": {
                      "$ref": "examples/reward_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/single_character_by_id": {
      "get": {
        "summary": "Single Character By ID",
        "description": "Endpoint for retrieving bulk character stats.\n\nThis endpoint's payload is a superset of `character` and additionally includes data from related `characters_*` collections:\n- `characters_currency`\n- `characters_stat_history`\n- `characters_stat`\n- `characters_stat_by_faction`\n- `characters_weapon_stat`\n- `characters_weapon_stat_by_faction`\n- `characters_items`\n\nThis endpoint is generally faster than querying these collections individually, but it comes with significant bandwidth costs. Note that this endpoint does not support most query commands, and that `c:show` and `c:hide` cannot be used to reduce the amount of data returned.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "single_character_by_id_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/single_character_by_id.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/skill": {
      "get": {
        "summary": "Skill",
        "description": "Purchasable skills, such as certifications and A.S.P. skills.",
        "tags": [
          "Certifications & A.S.P."
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/skillIdParam"
          },
          {
            "$ref": "#/components/parameters/skillLineIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/skill.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "skill": {
                    "value": {
                      "$ref": "examples/skill.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/skill_line": {
      "get": {
        "summary": "Skill Line",
        "description": "Skill lines represent upgrade paths for skills, such as Ammo Capacity.",
        "tags": [
          "Certifications & A.S.P."
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/skillLineIdParam"
          },
          {
            "$ref": "#/components/parameters/skillCategoryIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_line_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/skill_line.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "skill_line": {
                    "value": {
                      "$ref": "examples/skill_line.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/skill_category": {
      "get": {
        "summary": "Skill Category",
        "description": "Skill categories represent a grouping of skills.\n\nThey usually group skills by the loadout slots for which they provide items, such as \"Passive Systems\" or \"Ability Slot\". On weapons, they generally represent a given attachment slot.",
        "tags": [
          "Certifications & A.S.P."
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/skillCategoryIdParam"
          },
          {
            "$ref": "#/components/parameters/skillSetIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_category_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/skill_category.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "skill_category": {
                    "value": {
                      "$ref": "examples/skill_category.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/skill_set": {
      "get": {
        "summary": "Skill Set",
        "description": "Skill sets represent the top-level grouping of skills.\n\nIn the old certification menu, this would group weapon-related skill lines into a sub-tree beneath the weapon itself.",
        "tags": [
          "Certifications & A.S.P."
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/skillSetIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skill_set_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/skill_set.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "skill_set": {
                    "value": {
                      "$ref": "examples/skill_set.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/target_type": {
      "get": {
        "summary": "Target Types",
        "description": "Enumerates the target types used to categorize the applicable targets of a weapon or effect.\n\nThis is effectively a constant mapping and can be cached aggressively.",
        "tags": [
          "Damage Calculation"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/targetTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "target_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/target_type.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "target_type": {
                    "value": {
                      "$ref": "examples/target_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/title": {
      "get": {
        "summary": "Title",
        "description": "Selectable titles for a character.\n\nNote that title IDs of 0 signify no title being selected.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/titleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/title.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "title": {
                    "value": {
                      "$ref": "examples/title.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/vehicle": {
      "get": {
        "summary": "Vehicle",
        "description": "Basic vehicle information such as name, description, and type.\n\nNote that vehicle types are only used internally and are not directly tied to damage mechanics or resistances. Liberators and Galaxies are still considered \"Light Aircraft\" in this endpoint.",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicle_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/vehicle.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "harasser": {
                    "value": {
                      "$ref": "examples/vehicle.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/vehicle_attachment": {
      "get": {
        "summary": "Vehicle Attachments",
        "description": "Maps items to the vehicles and factions that have access to them.\n\nThe `slot_id` field is used to identify where the item is attached to. The below list shows the types of items for each slot as of June 2023:\n\n```\nID   Description\n\n1    Primary Weapon\n2    Secondary Weapon\n3    Ability Slot\n4    Defensive Slot\n5    Chassis / Airframe\n6    Cockpit / Hood Ornament\n7    Camo\n8    Decal\n9    Exterior\n10   Weapon Slot / Catapult\n11   Weapon Slot / Catapult\n12   Afterburner / Nitrous\n13   (Unused)\n14   (Internal: Headlights)\n15   Horn\n16   Trim\n17   Lighting\n18   Hubcaps\n19   Other\n20   Tire Traits / Catapult\n21   Catapult\n22   Catapult\n```\n\nNote that this list is maintained manually and may be out of date. The slot associations are not available on the API.",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          },
          {
            "$ref": "#/components/parameters/factionIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicle_attachment_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/vehicle_attachment.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "harasser": {
                    "value": {
                      "$ref": "examples/vehicle_attachment.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/vehicle_faction": {
      "get": {
        "summary": "Vehicle Faction Map",
        "description": "Maps vehicles to the factions that have access to them.",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          },
          {
            "$ref": "#/components/parameters/factionIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicle_faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/vehicle_faction.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "harasser": {
                    "value": {
                      "$ref": "examples/vehicle_faction.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/vehicle_skill_set": {
      "get": {
        "summary": "Vehicle Skill Set Map",
        "description": "Maps vehicles to the skill sets that they use.\n\nNote that this relationship is expressed for each faction separetly.",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          },
          {
            "$ref": "#/components/parameters/skillSetIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicle_skill_set_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/vehicle_skill_set.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "vehicle_skill_set": {
                    "value": {
                      "$ref": "examples/vehicle_skill_set.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon": {
      "get": {
        "summary": "Weapon",
        "description": "Baseline weapon data, such as equip times, stock sights, and movement speed modifiers.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/weapon.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "regular": {
                    "value": {
                      "$ref": "examples/weapon_regular.json"
                    }
                  },
                  "knife": {
                    "value": {
                      "$ref": "examples/weapon_knife.json"
                    }
                  },
                  "heat": {
                    "value": {
                      "$ref": "examples/weapon_heat.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon_ammo_slot": {
      "get": {
        "summary": "Ammo Slots",
        "description": "Ammo slot data for a given weapon, including the clip size, reserve ammo capacity, and resupply behaviour.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_ammo_slot_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/weapon_ammo_slot.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "weapon_ammo_slot": {
                    "value": {
                      "$ref": "examples/weapon_ammo_slot.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon_datasheet": {
      "get": {
        "summary": "Weapon Datasheet",
        "description": "**Deprecated:** This table is not directly tied to the underlying fire mode and player state group data and may differ wildly from the true values!\n\nSuggested alternatives for the values provided by this collection are listed as part of the `weapon_datasheet` schema.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_datasheet_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/weapon_datasheet.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "weapon_datasheet": {
                    "value": {
                      "$ref": "examples/weapon_datasheet.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon_to_attachment": {
      "get": {
        "summary": "Weapon Attachments",
        "description": "Maps weapons to the attachments available to them. This table is largely synonymous with `ps2/item_attachment`, but contains additional entries that may not resolve to a valid item.\n\nFor this reason, it is recommended to base any attachment queries on the `ps2/item_attachment` endpoint instead.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_to_attachment_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/weapon_to_attachment.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "weapon_to_attachment": {
                    "value": {
                      "$ref": "examples/weapon_to_attachment.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon_to_fire_group": {
      "get": {
        "summary": "Weapon Fire Groups",
        "description": "Maps weapons to their set of fire groups. The `fire_group_index` field matches the in-game fire mode selection; hitting 'B' in-game is equivalent to incrementing the index by 1.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          },
          {
            "$ref": "#/components/parameters/fireGroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_to_fire_group_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/weapon_to_fire_group.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "weapon_to_fire_group": {
                    "value": {
                      "$ref": "examples/weapon_to_fire_group.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/world": {
      "get": {
        "summary": "World",
        "description": "A game server for a given region and game.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "world_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/world.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "connery": {
                    "value": {
                      "$ref": "examples/world.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/world_event": {
      "get": {
        "summary": "World Event",
        "description": "ReST endpoint for retrieving historical world events.\n\nThe `world_id` and `id` fields are interchangeable.",
        "tags": [
          "Event History"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          },
          {
            "$ref": "#/components/parameters/worldEventWorldIdParam"
          },
          {
            "$ref": "#/components/parameters/worldEventTypeParam"
          },
          {
            "$ref": "#/components/parameters/beforeParam"
          },
          {
            "$ref": "#/components/parameters/afterParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "world_event_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/world_event.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/world_stat_history": {
      "get": {
        "summary": "(Defunct) World Stat History",
        "description": "Historical data for a given global event.",
        "tags": [
          "Metagame & Alerts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "world_stat_history_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/world_stat_history.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "world_stat_history": {
                    "value": {
                      "$ref": "examples/world_stat_history.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/zone": {
      "get": {
        "summary": "Zone",
        "description": "World continent and dynamic zone information.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/zoneIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "zone_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/zone.yaml"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "indar": {
                    "value": {
                      "$ref": "examples/zone.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/zone_effect": {
      "get": {
        "summary": "Zone Effects",
        "description": "Passive effects such as weapon stat modifications from attachments or equipped skills.\n\nFor weapon damage effects, see `ps2/effect` instead. See the `ps2/zone_effect_type` collection for a list of available zone effect types.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/zoneEffectIdParam"
          },
          {
            "$ref": "#/components/parameters/zoneEffectTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "zone_effect_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/zone_effect.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "zone_effect": {
                    "value": {
                      "$ref": "examples/zone_effect.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/zone_effect_type": {
      "get": {
        "summary": "Zone Effect Types",
        "description": "A type of zone effect.\n\nThe generic fields `paramX` and `stringX` are documented here. Note that not all fields are used by all zone effect types, or at all.",
        "tags": [
          "Effects & Abilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/zoneEffectTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "zone_effect_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "schemas/zone_effect_type.yaml"
                      }
                    }
                  }
                },
                "examples": {
                  "zone_effect_type": {
                    "value": {
                      "$ref": "examples/zone_effect_type.json"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "collectionParam": {
        "name": "collection",
        "in": "path",
        "description": "Name of the collection to access.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "character",
            "world",
            "zone"
          ]
        },
        "examples": {
          "character": {
            "summary": "Character",
            "value": "character"
          },
          "outfit": {
            "summary": "Outfit",
            "value": "outfit"
          },
          "world": {
            "summary": "Game Servers",
            "value": "world"
          }
        }
      },
      "gameParam": {
        "name": "game",
        "in": "path",
        "description": "The API game to access.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "ps2",
            "ps2:v2",
            "ps2ps4eu",
            "ps2ps4eu:v2",
            "ps2ps4us",
            "ps2ps4us:v2"
          ]
        },
        "examples": {
          "ps2": {
            "summary": "PS2 on PC (all servers)",
            "value": "ps2"
          },
          "ps2ps4eu": {
            "summary": "PS2 on PS4 (EU server)",
            "value": "ps2ps4eu"
          },
          "ps2ps4us": {
            "summary": "PS2 on PS4 (US server)",
            "value": "ps2ps4us"
          }
        }
      },
      "qcShowParam": {
        "name": "c:show",
        "in": "query",
        "description": "If set, only the response keys listed will be included in the response object. Overrides `c:hide`. Multiple fields can be comma-separated. Dot-notation is supported to select sub-keys.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "Basic Character Info": {
            "summary": "Basic character info only",
            "value": "name.first,character_id,battle_rank.value,prestige_level"
          }
        }
      },
      "qcHideParam": {
        "name": "c:hide",
        "in": "query",
        "description": "If set, the given response fields will be excluded from the response. If `c:show` is also set, this parameter will be ignored. Multiple fields can be comma-separated. Dot-notation is supported to select sub-keys.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "hideNoisyKeys": {
            "summary": "Remove noisy subkeys",
            "value": "name.first_lower,cert,daily_ribbon"
          }
        }
      },
      "qcSortParam": {
        "name": "c:sort",
        "in": "query",
        "description": "Allows sorting the results by one or more fields. Multiple fields can be comma-separated. The sorting direction can be specified by appending `:1` (ascending, default) or `:-1` (descending).",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "factionAsp": {
            "summary": "Sort by faction (asc) and ASP rank (desc)",
            "value": "faction_id,prestige_level:-1"
          }
        }
      },
      "qcHasParam": {
        "name": "c:has",
        "in": "query",
        "description": "Filters results by entries with non-NULL values in the given fields. Multiple fields can be comma-separated.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false
      },
      "qcResolveParam": {
        "name": "c:resolve",
        "in": "query",
        "description": "Include additional fields in the response. See the `resolve_list` field of the collection list for permissible values for a given collection.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": true,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "outfitMember": {
            "summary": "Outfit Member",
            "value": "outfit_member"
          },
          "profile": {
            "summary": "Last Seen Profile",
            "value": "profile"
          }
        }
      },
      "qcCaseParam": {
        "name": "c:case",
        "in": "query",
        "description": "Whether case sensitivity is enabled for string comparisongs. Defaults to true. Note that this impacts query performance, `ps2/character.name`, `ps2/outfit.name`, `ps2/outfit.alias` all provide lowercase variants for improved performance.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "disable": {
            "summary": "Disabled",
            "value": "false"
          }
        }
      },
      "qcLimitParam": {
        "name": "c:limit",
        "in": "query",
        "description": "Return up to N results from the collection. Defaults to 1.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100000
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "five": {
            "summary": "5 Results",
            "value": 5
          }
        }
      },
      "qcLimitPerDbParam": {
        "name": "c:limitPerDB",
        "in": "query",
        "description": "The `ps2/character` collection is distributed across 20 distinct databases. The per-DB limit may be more predictable in some use-cases. If set, `c:limit` will be ignored. For collections other than `ps2/character`, this parameter falls behaves exactly like `c:limit`.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5000
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "five": {
            "summary": "1 Result per DB",
            "value": 1
          }
        }
      },
      "qcStartParam": {
        "name": "c:start",
        "in": "query",
        "description": "Skips the first N results from the result list. Together with `c:limit`, can be used for pagination. Note that sorting may be required to get consistent orderings. Due to the multiple databases used, this behaves unusually for the `ps2/character` collection.",
        "schema": {
          "type": "integer",
          "minimum": 0
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": 0
          },
          "five": {
            "summary": "Skip first 10 Results",
            "value": 10
          }
        }
      },
      "qcIncludeNullParam": {
        "name": "c:includeNull",
        "in": "query",
        "description": "Whether to include response keys for NULL values, rather than omitting them. Note that this does not return the canonical `null`, but the string `\"NULL\"`.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "1",
            "0"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "five": {
            "summary": "Enabled",
            "value": "true"
          }
        }
      },
      "qcLangParam": {
        "name": "c:lang",
        "in": "query",
        "description": "By default, localized fields such as `ps2/item.name` will return results for all supported locales. This field allows specifying a single locale to return, greatly reducing response payload size.",
        "schema": {
          "type": "string",
          "enum": [
            "en",
            "de",
            "es",
            "fr",
            "it",
            "tr"
          ]
        },
        "examples": {
          "enOnly": {
            "summary": "Only EN locale",
            "value": "en"
          }
        }
      },
      "qcJoinParam": {
        "name": "c:join",
        "in": "query",
        "description": "Similar to `c:resolve`, but allows specifying arbitrary subqueries to add to the response. For details, see the [Census API documentation](https://census.daybreakgames.com/#collection-joining) or the community [Census API Primer](https://github.com/leonhard-s/auraxium/wiki/Census-API-Primer#joined-queries).",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "charctersWorld": {
            "summary": "Character with game server",
            "value": "characers_world"
          },
          "characterOnlineStatus": {
            "summary": "Character online status",
            "value": "characters_online_status^show:online_status"
          }
        }
      },
      "qcTreeParam": {
        "name": "c:tree",
        "in": "query",
        "description": "Allows rearranging lists of result into a tree. See the [Census API documentation](https://census.daybreakgames.com/#tree-reformatting) for deatils.",
        "schema": {
          "type": "string"
        }
      },
      "qcTimingParam": {
        "name": "c:timing",
        "in": "query",
        "description": "Adds the top-level field `timing` containing timing information to the result object. For queries using `c:resolve` or `c:join`, this also contains information about the subqueries.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "timing": {
            "summary": "With timing info",
            "value": "true"
          }
        }
      },
      "qcExactMatchFirstParam": {
        "name": "c:exactMatchFirst",
        "in": "query",
        "description": "When performing fuzzy string queries, such as `^` (startswith) or `*` (contains), promote any match exactly matching the full input string to the top of the search list. Useful for user-facing name lookups.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        }
      },
      "qcDistinctParam": {
        "name": "c:distinct",
        "in": "query",
        "description": "Instead of fetching results, list all distinct values for a given field. Note that this may include duplicate entries for `ps2/character` due to the multiple databases. Results are truncated to 20'000 values.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "factions": {
            "summary": "Unique factions",
            "value": "faction_id"
          },
          "profiles": {
            "summary": "Unique profiles",
            "value": "profile_id"
          }
        }
      },
      "qcRetryParam": {
        "name": "c:retry",
        "in": "query",
        "description": "By default, the API will retry any queries once before failing. By setting this value to `false`, you can fail earlier, which can be useful if you have your own retry mechanisms or logging configuration.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "noRetry": {
            "summary": "Retry disabled",
            "value": "false"
          }
        }
      },
      "abilityIdParam": {
        "name": "ability_id",
        "in": "query",
        "description": "Unique ID of an ability.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "abilityTypeIdParam": {
        "name": "ability_type_id",
        "in": "query",
        "description": "Unique ID of an ability type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "achievementIdParam": {
        "name": "achievement_id",
        "in": "query",
        "description": "Unique ID of an achievement.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "afterParam": {
        "name": "after",
        "in": "query",
        "description": "Only return results newer than the given UTC timestamp.",
        "schema": {
          "type": "string"
        }
      },
      "armorFacingIdParam": {
        "name": "armor_facing_id",
        "in": "query",
        "description": "Unique ID of the armor facing direction.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "armorInfoIdParam": {
        "name": "armor_info_id",
        "in": "query",
        "description": "Unique ID of the armor info entry.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "characterIdParam": {
        "name": "character_id",
        "in": "query",
        "description": "Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.\n\nWhen converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64",
        "examples": {
          "pc": {
            "summary": "Higby (PC)",
            "value": "5428010618015189601"
          },
          "ps4eu": {
            "summary": "Dreadnaught (PS4 EU)",
            "value": "5428352936466451601"
          },
          "ps4us": {
            "summary": "Kevin (PS4 US)",
            "value": "5428352933375941729"
          }
        }
      },
      "beforeParam": {
        "name": "before",
        "in": "query",
        "description": "Only return results older than the given UTC timestamp.",
        "schema": {
          "type": "string"
        }
      },
      "characterNameFirstParam": {
        "name": "name.first",
        "in": "query",
        "description": "Name of the character. Note that when looking up characters, it is preferable to query `name.first_lower` with a lowercase version of the search string.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "higby": {
            "summary": "Higby",
            "value": "Higby"
          }
        }
      },
      "characterNameFirstLowerParam": {
        "name": "name.first_lower",
        "in": "query",
        "description": "Lowercase version of `name.first`. When performing case-insensitive lookups, using this field is more performant than setting `c:case=false`.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "higby": {
            "summary": "Higby",
            "value": "higby"
          }
        }
      },
      "currencyIdParam": {
        "name": "currency_id",
        "in": "query",
        "description": "Unique ID of a currency.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "directiveIdParam": {
        "name": "directive_id",
        "in": "query",
        "description": "Unique ID of a directive.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "directiveTierIdParam": {
        "name": "directive_tier_id",
        "in": "query",
        "description": "Unique ID of a directive tier.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "directiveTreeIdParam": {
        "name": "directive_tree_id",
        "in": "query",
        "description": "Unique ID of a directive tree.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "directiveTreeCategoryIdParam": {
        "name": "directive_tree_category_id",
        "in": "query",
        "description": "Unique ID of a directive tree category.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "effectIdParam": {
        "name": "effect_id",
        "in": "query",
        "description": "Unique ID of the effect.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "effectTypeIdParam": {
        "name": "effect_type_id",
        "in": "query",
        "description": "Unique ID of the effect type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "eventTypeParam": {
        "name": "type",
        "in": "query",
        "description": "Type of event to retrieve.",
        "schema": {
          "type": "string",
          "enum": [
            "BATTLE_RANK",
            "ITEM",
            "ACHIEVEMENT",
            "DEATH",
            "KILL",
            "VEHICLE_DESTROY",
            "FACILITY_CHARACTER",
            "FACILITYCONTROL",
            "METAGAME"
          ]
        }
      },
      "characterEventTypeParam": {
        "name": "type",
        "in": "query",
        "description": "Type of event to retrieve.",
        "schema": {
          "type": "string",
          "enum": [
            "BATTLE_RANK",
            "ITEM",
            "ACHIEVEMENT",
            "DEATH",
            "KILL",
            "VEHICLE_DESTROY",
            "FACILITY_CHARACTER"
          ]
        }
      },
      "characterEventCharacterIdParam": {
        "name": "id",
        "in": "query",
        "description": "Alias for `character_id`.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64"
      },
      "characterEventsGroupedEventTypeParam": {
        "name": "type",
        "in": "query",
        "description": "Type of event to retrieve.",
        "schema": {
          "type": "string",
          "enum": [
            "DEATH",
            "KILL"
          ]
        }
      },
      "experienceIdParam": {
        "name": "experience_id",
        "in": "query",
        "description": "Unique ID of the experience type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "facilityIdAParam": {
        "name": "facility_id_a",
        "in": "query",
        "description": "Unique ID of the first facility.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "facilityIdBParam": {
        "name": "facility_id_b",
        "in": "query",
        "description": "Unique ID of the second facility.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "facilityTypeIdParam": {
        "name": "facility_type_id",
        "in": "query",
        "description": "Unique ID of the facility type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "factionIdParam": {
        "name": "faction_id",
        "in": "query",
        "description": "Unique identifier of a faction.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "fireGroupIdParam": {
        "name": "fire_group_id",
        "in": "query",
        "description": "Unique identifier of a fire group.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "fireModeIdParam": {
        "name": "fire_mode_id",
        "in": "query",
        "description": "Unique identifier of a fire mode.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "fireModeTypeIdParam": {
        "name": "fire_mode_type_id",
        "in": "query",
        "description": "Unique identifier of a fire mode type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "imageIdParam": {
        "name": "image_id",
        "in": "query",
        "description": "Unique identifier of an image.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "imageSetIdParam": {
        "name": "image_set_id",
        "in": "query",
        "description": "Identifier of an image set.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "itemIdParam": {
        "name": "item_id",
        "in": "query",
        "description": "Unique identifier of an item.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "itemTypeIdParam": {
        "name": "item_type_id",
        "in": "query",
        "description": "Unique identifier of an item type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "itemCategoryIdParam": {
        "name": "item_category_id",
        "in": "query",
        "description": "Unique identifier of an item category.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "leaderboardNameParam": {
        "name": "name",
        "in": "query",
        "description": "Name of a statistic for leaderboards.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "Kills",
            "Score",
            "Time",
            "Deaths"
          ]
        }
      },
      "leaderboardPeriodParam": {
        "name": "period",
        "in": "query",
        "description": "Time period for a leadboard.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "Forever",
            "Monthly",
            "Weekly",
            "Daily",
            "OneLife"
          ]
        }
      },
      "leaderboardCharacterIdParam": {
        "name": "character_id",
        "in": "query",
        "description": "Unique identifier of a character for which to fetch leaderboard data.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64"
      },
      "leaderboardWorldParam": {
        "name": "world",
        "in": "query",
        "description": "Server for which to fetch leaderboard data. Note that this may return results for defunct servers, such as Lithcorp (ID 11) despite those characters since having been transfered to Cobalt (ID 13).",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "loadoutIdParam": {
        "name": "loadout_id",
        "in": "query",
        "description": "Unique identifier of a loadout.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "mapRegionIdParam": {
        "name": "map_region_id",
        "in": "query",
        "description": "Unique identifier of a map region.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "marketingBundleIdParam": {
        "name": "marketing_bundle_id",
        "in": "query",
        "description": "Unique identifier of a marketing bundle.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "metagameEventIdParam": {
        "name": "metagame_event_id",
        "in": "query",
        "description": "Unique identifier of a metagame event.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "metagameEventStateIdParam": {
        "name": "metagame_event_state_id",
        "in": "query",
        "description": "Unique identifier of a metagame event state.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "objectiveIdParam": {
        "name": "objective_id",
        "in": "query",
        "description": "Unique identifier of an objective.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "objectiveGroupIdParam": {
        "name": "objective_group_id",
        "in": "query",
        "description": "Unique identifier of an objective group.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "objectiveSetIdParam": {
        "name": "objective_set_id",
        "in": "query",
        "description": "Unique identifier of an objective set.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "objectiveTypeIdParam": {
        "name": "objective_type_id",
        "in": "query",
        "description": "Unique identifier of an objective type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "outfitIdParam": {
        "name": "outfit_id",
        "in": "query",
        "description": "Unique identifier of an outfit.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64"
      },
      "profileIdParam": {
        "name": "profile_id",
        "in": "query",
        "description": "Unique identifier of a profile.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "projectileIdParam": {
        "name": "projectile_id",
        "in": "query",
        "description": "Unique identifier of a projectile.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "projectileFlightTypeIdParam": {
        "name": "projectile_flight_type_id",
        "in": "query",
        "description": "Unique identifier of a projectile flight type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "regionIdParam": {
        "name": "region_id",
        "in": "query",
        "description": "Unique identifier of a region.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "rewardIdParam": {
        "name": "reward_id",
        "in": "query",
        "description": "Unique identifier of a reward.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "rewardGroupIdParam": {
        "name": "reward_group_id",
        "in": "query",
        "description": "Unique identifier of a reward group.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "rewardSetIdParam": {
        "name": "reward_set_id",
        "in": "query",
        "description": "Unique identifier of a reward set.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "rewardTypeIdParam": {
        "name": "reward_type_id",
        "in": "query",
        "description": "Unique identifier of a reward type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "skillIdParam": {
        "name": "skill_id",
        "in": "query",
        "description": "Unique identifier of a skill.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "skillLineIdParam": {
        "name": "skill_line_id",
        "in": "query",
        "description": "Unique identifier of a skill line.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "skillCategoryIdParam": {
        "name": "skill_category_id",
        "in": "query",
        "description": "Unique identifier of a skill category.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "skillSetIdParam": {
        "name": "skill_set_id",
        "in": "query",
        "description": "Unique identifier of a skill set.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "statNameParam_characters_stat": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_stat` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "achievement_count",
            "assist_count",
            "deaths",
            "facility_defended_count",
            "fire_count",
            "hit_count",
            "medal_count",
            "play_time",
            "score",
            "skill_points",
            "weapon_deaths",
            "weapon_fire_count",
            "weapon_hit_count",
            "weapon_play_time",
            "weapon_score"
          ]
        }
      },
      "statNameParam_characters_stat_by_faction": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_stat_by_faction` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "domination_count",
            "facility_capture_count",
            "killed_by",
            "kills",
            "revenge_count",
            "weapon_damage_given",
            "weapon_damage_taken_by",
            "weapon_headshots",
            "weapon_killed_by",
            "weapon_kills",
            "weapon_vehicle_kills"
          ]
        }
      },
      "statNameParam_characters_stat_history": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_stat_history` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "battle_rank",
            "certs",
            "deaths",
            "facility_capture",
            "facility_defend",
            "kills",
            "medals",
            "ribbons",
            "score",
            "time"
          ]
        }
      },
      "statNameParam_characters_weapon_stat": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_weapon_stat` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "weapon_deaths",
            "weapon_fire_count",
            "weapon_hit_count",
            "weapon_play_time",
            "weapon_score"
          ]
        }
      },
      "statNameParam_characters_weapon_stat_by_faction": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_weapon_stat_by_faction` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "weapon_damage_given",
            "weapon_damage_taken_by",
            "weapon_headshots",
            "weapon_killed_by",
            "weapon_kills",
            "weapon_vehicle_kills"
          ]
        }
      },
      "profileIdParam_character": {
        "name": "profile_id",
        "in": "query",
        "description": "Subset of identifiers from the `profile_id` collection. The values map onto the NC loadout IDs regardless of faction. 0: All time, 1: Infiltrator, 3: Light Assault, 4: Combat Medic, 5: Engineer, 6: MAX Unit.",
        "schema": {
          "type": "string",
          "enum": [
            "0",
            "1",
            "3",
            "4",
            "5",
            "6",
            "7"
          ]
        }
      },
      "resistInfoIdParam": {
        "name": "resist_info_id",
        "in": "query",
        "description": "Unique identifier of a resist info entry.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "resistTypeIdParam": {
        "name": "resist_type_id",
        "in": "query",
        "description": "Unique identifier of a resist type.",
        "schema": {
          "type": "string"
        }
      },
      "resourceTypeIdParam": {
        "name": "resource_type_id",
        "in": "query",
        "description": "Unique identifier of a resource type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "targetTypeIdParam": {
        "name": "target_type_id",
        "in": "query",
        "description": "Unique identifier of a target type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "titleIdParam": {
        "name": "title_id",
        "in": "query",
        "description": "Unique identifier of a character title.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "vehicleIdParam": {
        "name": "vehicle_id",
        "in": "query",
        "description": "Unique identifier of a vehicle.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "weaponIdParam": {
        "name": "weapon_id",
        "in": "query",
        "description": "Unique identifier of a weapon.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "worldIdParam": {
        "name": "world_id",
        "in": "query",
        "description": "Unique identifier of a world.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "worldEventTypeParam": {
        "name": "type",
        "in": "query",
        "description": "Event name for the `world_event` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "FACILITYCONTROL",
            "METAGAME"
          ]
        }
      },
      "worldEventWorldIdParam": {
        "name": "id",
        "in": "query",
        "description": "Alias for `world_id`.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "zoneIdParam": {
        "name": "zone_id",
        "in": "query",
        "description": "Unique identifier of a zone.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "zoneEffectIdParam": {
        "name": "zone_effect_id",
        "in": "query",
        "description": "Unique ID of a zone effect.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "zoneEffectTypeIdParam": {
        "name": "zone_effect_type_id",
        "in": "query",
        "description": "Unique ID of a zone  type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      }
    },
    "schemas": {},
    "examples": {}
  }
}