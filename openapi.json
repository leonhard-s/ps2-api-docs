{
  "openapi": "3.1.0",
  "info": {
    "title": "PlanetSide 2 API",
    "summary": "Public API for PlanetSide 2 community developers",
    "description": "Unofficial API specification for [PlanetSide 2](https://www.planetside2.com/) as made available through the [Daybreak Game Company Census API](https://census.daybreakgames.com/).\n\nThese API specs are not affiliated with Daybreak Game Company, Rogue Planet Games, or the PlanetSide 2 developer team and come with absolutely no warranty.",
    "termsOfService": "https://census.daybreakgames.com#services-api-policy",
    "contact": {
      "name": "Project Homepage",
      "url": "https://github.com/leonhard-s/ps2-api-docs"
    },
    "version": "0.3"
  },
  "jsonSchemaDialect": "https://spec.openapis.org/oas/3.1/dialect/base",
  "externalDocs": {
    "description": "Official documentation for the documentation for the PlanetSide 2 API.",
    "url": "https://census.daybreakgames.com/"
  },
  "servers": [
    {
      "url": "https://census.daybreakgames.com",
      "description": "Casual-use Daybreak Games endpoint, throttled to 10 requests per minute and IP address"
    },
    {
      "url": "https://census.daybreakgames.com/{serviceId}",
      "description": "Production Daybreak Games endpoint, with service ID",
      "variables": {
        "serviceId": {
          "enum": [
            "s:example"
          ],
          "default": "s:example",
          "description": "Unique string used to identify a given consumer on the API. The default value of `s:example` underlies the same rate limits as the endpoint without service ID information. A custom service ID can be requested via [this form](https://census.daybreakgames.com/#devSignup)."
        }
      }
    },
    {
      "url": "https://census.lithafalcon.cc",
      "description": "Unofficial Community endpoint for static data.\nVisit the project URL for details."
    }
  ],
  "tags": [
    {
      "name": "Game-Agnostic Endpoints",
      "description": "Generic documentation of the Census API endpoints available for all games. The PlanetSide 2 endpoints are listed separtely to provide more detail, but they generally also support the full set of query parameters and commands list here. For a list of exceptions, see the [\"Special\" PS2 Collections](https://census.daybreakgames.com/#special-collections) section of the Census API documentation."
    },
    {
      "name": "Character Information",
      "description": "Collections related to PlanetSide 2 character information and lookups."
    },
    {
      "name": "Basics",
      "description": "General information about factions, classes, continents, and servers in PlanetSide 2."
    },
    {
      "name": "Player Outfits",
      "description": "Collections related to PlanetSide 2 outfits and outfit membership."
    },
    {
      "name": "Statistics",
      "description": "Collections concerning character statistics for weapon, classes, or vehicles."
    },
    {
      "name": "Leaderboards",
      "description": "Global or server-wide leaderboards for select statistics."
    },
    {
      "name": "Items & Bundles",
      "description": "Collections related to item enumeration and availability, as well as the in-game depot."
    },
    {
      "name": "Weapons & Firing Mechanics",
      "description": "Weapon and firing mechanics data, including fire modes, projectiles, and ammo types."
    }
  ],
  "security": [],
  "paths": {
    "/get/{game}": {
      "get": {
        "summary": "Listing available collections",
        "description": "Return a list of all collections available for the current game namespace.\n\nThe keys in the entries' `resolve_list` field can be passed to the `c:resolve` parameter when accessing the respective collection to insert additional data into the response payload.\n\nNote that while the examples only show a single record, this endpoint cannot be filtered and always returns all results.",
        "tags": [
          "Game-Agnostic Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "datatype_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/datatype"
                      }
                    },
                    "returned": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "character": {
                    "$ref": "#/components/examples/datatype_character"
                  },
                  "outfitMember": {
                    "$ref": "#/components/examples/datatype_outfitMember"
                  },
                  "characterOnlineStatus": {
                    "$ref": "#/components/examples/datatype_characterOnlineStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/count/{game}/{collection}": {
      "get": {
        "summary": "Get the number of records in a collection",
        "description": "Instead of returning the given results directly, this endpoint returns the number of results.\n\nThis is especially useful for large collections which cannot be fetched in full, such as `ps2/character`. This endpoint still supports filtering by parameters, as well as some query commands such as `c:has`.\n\nConsumers may also want to query the result count for a given query before fetching to decide whether to paginate the response.",
        "tags": [
          "Game-Agnostic Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/collectionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/count_success"
                  },
                  "error": {
                    "$ref": "#/components/examples/count_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/{collection}": {
      "get": {
        "summary": "Retrieve results from a collection",
        "description": "This endpoint documents generic parameters available on most collections. For details on collection-specific variables and response schemas, please see the respective collection's query entry.",
        "tags": [
          "Game-Agnostic Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/collectionParam"
          },
          {
            "$ref": "#/components/parameters/qcShowParam"
          },
          {
            "$ref": "#/components/parameters/qcHideParam"
          },
          {
            "$ref": "#/components/parameters/qcSortParam"
          },
          {
            "$ref": "#/components/parameters/qcHasParam"
          },
          {
            "$ref": "#/components/parameters/qcResolveParam"
          },
          {
            "$ref": "#/components/parameters/qcCaseParam"
          },
          {
            "$ref": "#/components/parameters/qcLimitParam"
          },
          {
            "$ref": "#/components/parameters/qcLimitPerDbParam"
          },
          {
            "$ref": "#/components/parameters/qcStartParam"
          },
          {
            "$ref": "#/components/parameters/qcIncludeNullParam"
          },
          {
            "$ref": "#/components/parameters/qcLangParam"
          },
          {
            "$ref": "#/components/parameters/qcJoinParam"
          },
          {
            "$ref": "#/components/parameters/qcTreeParam"
          },
          {
            "$ref": "#/components/parameters/qcTimingParam"
          },
          {
            "$ref": "#/components/parameters/qcExactMatchFirstParam"
          },
          {
            "$ref": "#/components/parameters/qcDistinctParam"
          },
          {
            "$ref": "#/components/parameters/qcRetryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "{collection}_list": {
                      "type": "array",
                      "members": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "timing": {
                      "type": "object",
                      "summary": "Only included if `c:timing` is enabled.",
                      "properties": {
                        "total-ms": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "characterInfo": {
                    "$ref": "#/components/examples/collection_characterInfo"
                  },
                  "factionTags": {
                    "$ref": "#/components/examples/collection_factionTags"
                  },
                  "mapFacilities": {
                    "$ref": "#/components/examples/collection_mapFacilities"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/character": {
      "get": {
        "summary": "Character",
        "description": "Game-specific documentation for the `character` collection.\n\nThis collection is randomly distributed across 20 different databases, causing some unusual behaviour when filtering. For example, the `c:distinct` parameter will fetch the distinct values for each database and aggregate them in the response, resulting in duplicate entries. This and other special cases are documented with the corresponding query command parameters in the `General` section.\n\nIn addition to the commonly-used parameters provided, this endpoint may be queried by any of its fields, including sub-keys like `times.creation`.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/qcLimitPerDbParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstLowerParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "character_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/character"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/character_higby"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/character_name": {
      "get": {
        "summary": "Character Name",
        "description": "Optimized, low-bandwidth endpoint for character name resolution.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstParam"
          },
          {
            "$ref": "#/components/parameters/characterNameFirstLowerParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "character_name_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/character_name"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/character_name_higby"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_friend": {
      "get": {
        "summary": "Friends List",
        "description": "Query the friends list of a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_friend_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_friend"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_friend"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_item": {
      "get": {
        "summary": "Character Items",
        "description": "Query the items of a character. Note that this collection no longer lists account-wide item unlocks as this served as a fingerprint to identify players across multiple characters.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_item"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_leaderboard": {
      "get": {
        "summary": "Character Leaderboard",
        "description": "Query the leaderboard for a character. Note that only the top 10'000 players for a given statistic are tracked in the leaderboard; many characters will not have an entry in this collection.\n\nThe `limit` key inserted into the response indicates the number of requested entries when passing multiple character IDs. Comparison with `returned` may be used to determine whether any characters were skipped due to not being in the leaderboard.",
        "tags": [
          "Leaderboards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardCharacterIdParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardNameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardPeriodParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "characters_leaderboard_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/leaderboard"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "key": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_online_status": {
      "get": {
        "summary": "Online Status",
        "description": "Query the online status of a character.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_online_status_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_online_status"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_online_status"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_stat": {
      "get": {
        "summary": "Character Statistics",
        "description": "Basic statistics endpoint for character-wide and class-specific statistics.\n\n- `stat_name` lists the name of the stat\n- `profile` represents the class, with a value of 0 denoting a character-wide value",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_stat"
          },
          {
            "$ref": "#/components/parameters/profileIdParam_character"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_stat_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_stat"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_stat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_stat_by_faction": {
      "get": {
        "summary": "Character Statistics by Faction",
        "description": "Faction-specific statistics endpoint. Useful for determining faction bias or kill spread.\n\n- `stat_name` lists the name of the stat\n- `profile` represents the class, with a value of 0 denoting a character-wide value\n\nAll `value_*` fields are provided per-faction. Note that the value for the own faction is often blanked: `value_nc` of the stat `kills` cannot be used to enumerate an NC character's team kills, for example.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_stat_by_faction"
          },
          {
            "$ref": "#/components/parameters/profileIdParam_character"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_stat_by_faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_stat_by_faction"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_stat_by_faction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_stat_history": {
      "get": {
        "summary": "Historical Statistics",
        "description": "Statistics endpoint for historical character stats. In addition to the `all_time` and `one_life_max` keys, values are also provided for the last 31 days (`day`), 12 months (`month`), or 13 weeks (`week`).\n\n- `stat_name` lists the name of the stat\n- `profile` represents the class, with a value of 0 denoting a character-wide value.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_stat_history"
          },
          {
            "$ref": "#/components/parameters/profileIdParam_character"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_stat_history_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_stat_history"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_stat_history"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_weapon_stat": {
      "get": {
        "summary": "Weapon Statistics",
        "description": "Weapon statistics endpoint containing generic values such as playtime or score while wielding. The most common use is calculating the accuracy of a player with a given weapon by dividing `weapon_hit_count` by `weapon_fire_count`.\n\n- `stat_name` lists the name of the stat\n- `item_id` identifies the item for the weapon. Note that this value can be zero, in that case it serves as a catch-all for all weapons for the given `vehicle_id`.\n- `vehicle_id` the vehicle on which the weapon is available.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_weapon_stat"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_weapon_stat_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_weapon_stat"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "weapon": {
                    "$ref": "#/components/examples/characters_weapon_stat_infantry_weapon"
                  },
                  "vehicle": {
                    "$ref": "#/components/examples/characters_weapon_stat_vehicle"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_weapon_stat_by_faction": {
      "get": {
        "summary": "Weapon Statistics By Faction",
        "description": "Faction-specific weapon statistics endpoint containing combat-focussed stats such as kills, deaths, headshots and damage dealt/taken.\n\n- `stat_name` lists the name of the stat\n- `item_id` identifies the item for the weapon. Note that this value can be zero, in that case it serves as a catch-all for all weapons for the given `vehicle_id`.\n- `vehicle_id` the vehicle on which the weapon is available.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/statNameParam_characters_weapon_stat_by_faction"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/vehicleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_weapon_stat_by_faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_weapon_stat_by_faction"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "weapon": {
                    "$ref": "#/components/examples/characters_weapon_stat_by_faction_infantry_weapon"
                  },
                  "vehicle": {
                    "$ref": "#/components/examples/characters_weapon_stat_by_faction_vehicle"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/characters_world": {
      "get": {
        "summary": "Character Server Lookup",
        "description": "Query the server a character is on.",
        "tags": [
          "Character Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "characters_world_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/characters_world"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "higby": {
                    "$ref": "#/components/examples/characters_world"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/faction": {
      "get": {
        "summary": "Faction",
        "description": "Playable and NPC factions.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/factionIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "faction_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/faction"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "tr": {
                    "$ref": "#/components/examples/faction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item": {
      "get": {
        "summary": "Items",
        "description": "Items in PlanetSide 2 are used to represent weapons, tools, and consumables, but also cosmetic items and internal control objects for player renaming or outfit resource consumption. Use the `item_type` collection to narrow searches to specific types.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/item"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "$ref": "#/components/examples/item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_attachment": {
      "get": {
        "summary": "Item Attachments",
        "description": "Maps attachment items to the items they can be attached to.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_attachment_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/item_attachment"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "$ref": "#/components/examples/item_attachment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_category": {
      "get": {
        "summary": "Item Categories",
        "description": "Item categories are used to group items together for display in the loadout screen or depot.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemCategoryIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_category_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/item_category"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "$ref": "#/components/examples/item_category"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_profile": {
      "get": {
        "summary": "Item-Class Mapping",
        "description": "Maps items to profiles (classes/vehicles) that have access to them.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_profile_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/item_profile"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "$ref": "#/components/examples/item_profile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_to_weapon": {
      "get": {
        "summary": "Item-Weapon Mapping",
        "description": "Maps items (including name, availability) to its respective weapon object\n\nNot all items have a weapon objects, though some filtering can be done through the `item_type_id` field, with the ID 26 representing most weapon types.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_to_weapon_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/item_to_weapon"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "$ref": "#/components/examples/item_to_weapon"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/item_type": {
      "get": {
        "summary": "Item Types",
        "description": "Items in PlanetSide 2 represent many different things beyond weapons, such as implant packs, cosmetics, or name change tokens. They are also used as internal helpers when pulling outfit resources, spawning vehicles, or interacting with certain terminals.\n\nThis collection lists the different item types, though many of these are never encountered on the API.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemTypeIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item_type_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/item_type"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "knife": {
                    "$ref": "#/components/examples/item_type"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/leaderboard": {
      "get": {
        "summary": "Global Leaderboard",
        "description": "Global leaderboard for a given server. This only includes the top 10'000 players for a given category and is not directly searchable. See `characters_leaderboard` to look up a character's ranking.\n\n`c:start` and `c:limit` are supported and allow for pagination. `c:join` and `c:tree` are also permitted. Any other query commands will be silently ignored.\n\nUnlike most other tables, this one defaults to a `c:limit` value of 10 and is always sorted in ascending order of leaderboard rank.",
        "tags": [
          "Leaderboards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardNameParam"
          },
          {
            "$ref": "#/components/parameters/leaderboardPeriodParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leaderboard_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/leaderboard"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "key": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "cobalt_all_time_kills": {
                    "$ref": "#/components/examples/leaderboard"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/loadout": {
      "get": {
        "summary": "Loadout",
        "description": "Enumeration of the six infantry classes for each playable faction.\n\nNote that this is different from the in-game loadouts, which are not available on the API.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/loadoutIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "loadout_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/loadout"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ncInfiltrator": {
                    "$ref": "#/components/examples/loadout"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/marketing_bundle": {
      "get": {
        "summary": "Bundles",
        "description": "Bundles available for purchase in the in-game store (Depot). This collection represents actual bundles. For pseudo-bundles used to purchase individual weapon attachments or cosmetics, see the `marketing_bundle_with_1_item` collection instead.\n\nNote that there is no guaranteed way of determining whether a given bundle is currently available for purchase. This collection contains many entries for defunct items and bundles, such as the single-use camos from the early days of the game.\n\nThis collection is automatically maintained and generally accurate with regards to certification prices, the daybreak/station cash values are generally less reliable.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/marketingBundleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "marketing_bundle_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/marketing_bundle"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "$ref": "#/components/examples/marketing_bundle"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/marketing_bundle_item": {
      "get": {
        "summary": "Items Available in Bundles",
        "description": "Maps marketing bundles to the items they contain.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/marketingBundleIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "marketing_bundle_item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/marketing_bundle_item"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "$ref": "#/components/examples/marketing_bundle_item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/marketing_bundle_with_1_item": {
      "get": {
        "summary": "Individual Item Bundles",
        "description": "These are pseudo-bundles with exactly 1 item each, allowing players to buy individual weapons or cosmetics with Daybreak Cash (formerly Station Cash).\n\nNote that in the case of weapons, these bundles are genreally mirrored by 'regular' bundles in the `ps2/marketing_bundle` collection, with the same `marketing_bundle_id`.",
        "tags": [
          "Items & Bundles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/marketingBundleIdParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "marketing_bundle_with_1_item_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/marketing_bundle_with_1_item"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "ns15mBundle": {
                    "$ref": "#/components/examples/marketing_bundle_with_1_item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit": {
      "get": {
        "summary": "Outfit",
        "description": "A player-run outfit or clan.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/outfit"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fno": {
                    "$ref": "#/components/examples/outfit"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit_member": {
      "get": {
        "summary": "Outfit Member",
        "description": "Outfit membership information for a givne character. Characters that are not members of any outfit will not have an entry in this collection.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_member_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/outfit_member"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "luperza": {
                    "$ref": "#/components/examples/outfit_member"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit_member_extended": {
      "get": {
        "summary": "Outfit Member (Extended)",
        "description": "Another variant of the `ps2/outfit_member` collection, but with the contents of the corresponding `ps2/outfit` merged in. This is useful for bulk lookups of outfit information for heterogenous lists of characters without requiring the explicit use of `c:join` or `c:resolve`.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/characterIdParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_member_extended_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/outfit_member_extended"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "luperza": {
                    "$ref": "#/components/examples/outfit_member_extended"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/outfit_rank": {
      "get": {
        "summary": "Custom Outfit Rank",
        "description": "Outfits can define their own custom rank names and permissions, which are listed here. Outfits using the default rank names may not have an entry here.",
        "tags": [
          "Player Outfits"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/outfitIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "outfit_rank_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/outfit_rank"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "fno": {
                    "$ref": "#/components/examples/outfit_rank"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/profile": {
      "get": {
        "summary": "Profile (Infantry)",
        "description": "Original endpoint for infantry profiles. This covers the names and loadout IDs connected to a given profile, and additionally provides movement speed multiplier information for infantry classes. Note that the key fields are also provided by `ps2/profile_2`, which not only covers infantry but also vehicles, deployables, and other entities.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          },
          {
            "$ref": "#/components/parameters/loadoutIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/profile"
                      }
                    }
                  }
                },
                "examples": {
                  "trLightAssault": {
                    "$ref": "#/components/examples/profile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/profile_2": {
      "get": {
        "summary": "Profile (All)",
        "description": "Extended profile endpoint containing all entity types, including NPCs, construction items, and deployables.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/profileIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile_2_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/profile_2"
                      }
                    }
                  }
                },
                "examples": {
                  "sunderer": {
                    "$ref": "#/components/examples/profile_2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon": {
      "get": {
        "summary": "Weapon",
        "description": "Baseline weapon data, such as equip times, stock sights, and movement speed modifiers.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/weapon"
                      }
                    }
                  }
                },
                "examples": {
                  "regular": {
                    "$ref": "#/components/examples/weapon_regular"
                  },
                  "knife": {
                    "$ref": "#/components/examples/weapon_knife"
                  },
                  "heat": {
                    "$ref": "#/components/examples/weapon_heat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon_ammo_slot": {
      "get": {
        "summary": "Ammo Slots",
        "description": "Ammo slot data for a given weapon, including the clip size, reserve ammo capacity, and resupply behaviour.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/weaponIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_ammo_slot_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/weapon_ammo_slot"
                      }
                    }
                  }
                },
                "examples": {
                  "weapon_ammo_slot": {
                    "$ref": "#/components/examples/weapon_ammo_slot"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/weapon_datasheet": {
      "get": {
        "summary": "Weapon Datasheet",
        "description": "**Deprecated:** This table is not directly tied to the underlying fire mode and player state group data and may differ wildly from the true values!\n\nSuggested alternatives for the values provided by this collection are listed as part of the `weapon_datasheet` schema.",
        "tags": [
          "Weapons & Firing Mechanics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/itemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weapon_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/weapon_datasheet"
                      }
                    }
                  }
                },
                "examples": {
                  "weapon_datasheet": {
                    "$ref": "#/components/examples/weapon_datasheet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/world": {
      "get": {
        "summary": "World",
        "description": "A game server for a given region and game.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/worldIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "world_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/world"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "connery": {
                    "$ref": "#/components/examples/world"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get/{game}/zone": {
      "get": {
        "summary": "Zone",
        "description": "World continent and dynamic zone information.",
        "tags": [
          "Basics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/gameParam"
          },
          {
            "$ref": "#/components/parameters/zoneIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "zone_list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/zone"
                      }
                    },
                    "returned": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                "examples": {
                  "indar": {
                    "$ref": "#/components/examples/zone"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "collectionParam": {
        "name": "collection",
        "in": "path",
        "description": "Name of the collection to access.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "character",
            "world",
            "zone"
          ]
        },
        "examples": {
          "character": {
            "summary": "Character",
            "value": "character"
          },
          "outfit": {
            "summary": "Outfit",
            "value": "outfit"
          },
          "world": {
            "summary": "Game Servers",
            "value": "world"
          }
        }
      },
      "gameParam": {
        "name": "game",
        "in": "path",
        "description": "The API game to access.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "ps2",
            "ps2:v2",
            "ps2ps4eu",
            "ps2ps4eu:v2",
            "ps2ps4us",
            "ps2ps4us:v2"
          ]
        },
        "examples": {
          "ps2": {
            "summary": "PS2 on PC (all servers)",
            "value": "ps2"
          },
          "ps2ps4eu": {
            "summary": "PS2 on PS4 (EU server)",
            "value": "ps2ps4eu"
          },
          "ps2ps4us": {
            "summary": "PS2 on PS4 (US server)",
            "value": "ps2ps4us"
          }
        }
      },
      "qcShowParam": {
        "name": "c:show",
        "in": "query",
        "description": "If set, only the response keys listed will be included in the response object. Overrides `c:hide`. Multiple fields can be comma-separated. Dot-notation is supported to select sub-keys.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "Basic Character Info": {
            "summary": "Basic character info only",
            "value": "name.first,character_id,battle_rank.value,prestige_level"
          }
        }
      },
      "qcHideParam": {
        "name": "c:hide",
        "in": "query",
        "description": "If set, the given response fields will be excluded from the response. If `c:show` is also set, this parameter will be ignored. Multiple fields can be comma-separated. Dot-notation is supported to select sub-keys.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "hideNoisyKeys": {
            "summary": "Remove noisy subkeys",
            "value": "name.first_lower,cert,daily_ribbon"
          }
        }
      },
      "qcSortParam": {
        "name": "c:sort",
        "in": "query",
        "description": "Allows sorting the results by one or more fields. Multiple fields can be comma-separated. The sorting direction can be specified by appending `:1` (ascending, default) or `:-1` (descending).",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "factionAsp": {
            "summary": "Sort by faction (asc) and ASP rank (desc)",
            "value": "faction_id,prestige_level:-1"
          }
        }
      },
      "qcHasParam": {
        "name": "c:has",
        "in": "query",
        "description": "Filters results by entries with non-NULL values in the given fields. Multiple fields can be comma-separated.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false
      },
      "qcResolveParam": {
        "name": "c:resolve",
        "in": "query",
        "description": "Include additional fields in the response. See the `resolve_list` field of the collection list for permissible values for a given collection.",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": true,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "outfitMember": {
            "summary": "Outfit Member",
            "value": "outfit_member"
          },
          "profile": {
            "summary": "Last Seen Profile",
            "value": "profile"
          }
        }
      },
      "qcCaseParam": {
        "name": "c:case",
        "in": "query",
        "description": "Whether case sensitivity is enabled for string comparisongs. Defaults to true. Note that this impacts query performance, `ps2/character.name`, `ps2/outfit.name`, `ps2/outfit.alias` all provide lowercase variants for improved performance.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "disable": {
            "summary": "Disabled",
            "value": "false"
          }
        }
      },
      "qcLimitParam": {
        "name": "c:limit",
        "in": "query",
        "description": "Return up to N results from the collection. Defaults to 1.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100000
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "five": {
            "summary": "5 Results",
            "value": 5
          }
        }
      },
      "qcLimitPerDbParam": {
        "name": "c:limitPerDB",
        "in": "query",
        "description": "The `ps2/character` collection is distributed across 20 distinct databases. The per-DB limit may be more predictable in some use-cases. If set, `c:limit` will be ignored. For collections other than `ps2/character`, this parameter falls behaves exactly like `c:limit`.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5000
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "five": {
            "summary": "1 Result per DB",
            "value": 1
          }
        }
      },
      "qcStartParam": {
        "name": "c:start",
        "in": "query",
        "description": "Skips the first N results from the result list. Together with `c:limit`, can be used for pagination. Note that sorting may be required to get consistent orderings. Due to the multiple databases used, this behaves unusually for the `ps2/character` collection.",
        "schema": {
          "type": "integer",
          "minimum": 0
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": 0
          },
          "five": {
            "summary": "Skip first 10 Results",
            "value": 10
          }
        }
      },
      "qcIncludeNullParam": {
        "name": "c:includeNull",
        "in": "query",
        "description": "Whether to include response keys for NULL values, rather than omitting them. Note that this does not return the canonical `null`, but the string `\"NULL\"`.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "1",
            "0"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "five": {
            "summary": "Enabled",
            "value": "true"
          }
        }
      },
      "qcLangParam": {
        "name": "c:lang",
        "in": "query",
        "description": "By default, localized fields such as `ps2/item.name` will return results for all supported locales. This field allows specifying a single locale to return, greatly reducing response payload size.",
        "schema": {
          "type": "string",
          "enum": [
            "en",
            "de",
            "es",
            "fr",
            "it",
            "tr"
          ]
        },
        "examples": {
          "enOnly": {
            "summary": "Only EN locale",
            "value": "en"
          }
        }
      },
      "qcJoinParam": {
        "name": "c:join",
        "in": "query",
        "description": "Similar to `c:resolve`, but allows specifying arbitrary subqueries to add to the response. For details, see the [Census API documentation](https://census.daybreakgames.com/#collection-joining) or the community [Census API Primer](https://github.com/leonhard-s/auraxium/wiki/Census-API-Primer#joined-queries).",
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false,
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "charctersWorld": {
            "summary": "Character with game server",
            "value": "characers_world"
          },
          "characterOnlineStatus": {
            "summary": "Character online status",
            "value": "characters_online_status^show:online_status"
          }
        }
      },
      "qcTreeParam": {
        "name": "c:tree",
        "in": "query",
        "description": "Allows rearranging lists of result into a tree. See the [Census API documentation](https://census.daybreakgames.com/#tree-reformatting) for deatils.",
        "schema": {
          "type": "string"
        }
      },
      "qcTimingParam": {
        "name": "c:timing",
        "in": "query",
        "description": "Adds the top-level field `timing` containing timing information to the result object. For queries using `c:resolve` or `c:join`, this also contains information about the subqueries.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "timing": {
            "summary": "With timing info",
            "value": "true"
          }
        }
      },
      "qcExactMatchFirstParam": {
        "name": "c:exactMatchFirst",
        "in": "query",
        "description": "When performing fuzzy string queries, such as `^` (startswith) or `*` (contains), promote any match exactly matching the full input string to the top of the search list. Useful for user-facing name lookups.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        }
      },
      "qcDistinctParam": {
        "name": "c:distinct",
        "in": "query",
        "description": "Instead of fetching results, list all distinct values for a given field. Note that this may include duplicate entries for `ps2/character` due to the multiple databases. Results are truncated to 20'000 values.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "factions": {
            "summary": "Unique factions",
            "value": "faction_id"
          },
          "profiles": {
            "summary": "Unique profiles",
            "value": "profile_id"
          }
        }
      },
      "qcRetryParam": {
        "name": "c:retry",
        "in": "query",
        "description": "By default, the API will retry any queries once before failing. By setting this value to `false`, you can fail earlier, which can be useful if you have your own retry mechanisms or logging configuration.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false",
            "0",
            "1"
          ]
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "noRetry": {
            "summary": "Retry disabled",
            "value": "false"
          }
        }
      },
      "characterIdParam": {
        "name": "character_id",
        "in": "query",
        "description": "Unique identifier of a charcter. Note that character IDs are not guaranteed to be unique across games; the same ID may be assigned to different characters for `ps2` than for `ps2ps4us`.\n\nWhen converting this value to native representations, note that a 64 bit integer type is required to avoid truncation.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64",
        "examples": {
          "pc": {
            "summary": "Higby (PC)",
            "value": "5428010618015189601"
          },
          "ps4eu": {
            "summary": "Dreadnaught (PS4 EU)",
            "value": "5428352936466451601"
          },
          "ps4us": {
            "summary": "Kevin (PS4 US)",
            "value": "5428352933375941729"
          }
        }
      },
      "characterNameFirstParam": {
        "name": "name.first",
        "in": "query",
        "description": "Name of the character. Note that when looking up characters, it is preferable to query `name.first_lower` with a lowercase version of the search string.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "higby": {
            "summary": "Higby",
            "value": "Higby"
          }
        }
      },
      "characterNameFirstLowerParam": {
        "name": "name.first_lower",
        "in": "query",
        "description": "Lowercase version of `name.first`. When performing case-insensitive lookups, using this field is more performant than setting `c:case=false`.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "notSet": {
            "summary": "Unset",
            "value": ""
          },
          "higby": {
            "summary": "Higby",
            "value": "higby"
          }
        }
      },
      "factionIdParam": {
        "name": "faction_id",
        "in": "query",
        "description": "Unique identifier of a faction.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "itemIdParam": {
        "name": "item_id",
        "in": "query",
        "description": "Unique identifier of an item.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "itemTypeIdParam": {
        "name": "item_type_id",
        "in": "query",
        "description": "Unique identifier of an item type.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "itemCategoryIdParam": {
        "name": "item_category_id",
        "in": "query",
        "description": "Unique identifier of an item category.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "leaderboardNameParam": {
        "name": "name",
        "in": "query",
        "description": "Name of a statistic for leaderboards.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "Kills",
            "Score",
            "Time",
            "Deaths"
          ]
        }
      },
      "leaderboardPeriodParam": {
        "name": "period",
        "in": "query",
        "description": "Time period for a leadboard.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "Forever",
            "Monthly",
            "Weekly",
            "Daily",
            "OneLife"
          ]
        }
      },
      "leaderboardCharacterIdParam": {
        "name": "character_id",
        "in": "query",
        "description": "Unique identifier of a character for which to fetch leaderboard data.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64"
      },
      "leaderboardWorldParam": {
        "name": "world",
        "in": "query",
        "description": "Server for which to fetch leaderboard data. Note that this may return results for defunct servers, such as Lithcorp (ID 11) despite those characters since having been transfered to Cobalt (ID 13).",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "loadoutIdParam": {
        "name": "loadout_id",
        "in": "query",
        "description": "Unique identifier of a loadout.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "marketingBundleIdParam": {
        "name": "marketing_bundle_id",
        "in": "query",
        "description": "Unique identifier of a marketing bundle.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "outfitIdParam": {
        "name": "outfit_id",
        "in": "query",
        "description": "Unique identifier of an outfit.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int64"
      },
      "profileIdParam": {
        "name": "profile_id",
        "in": "query",
        "description": "Unique identifier of a profile.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "statNameParam_characters_stat": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_stat` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "achievement_count",
            "assist_count",
            "deaths",
            "facility_defended_count",
            "fire_count",
            "hit_count",
            "medal_count",
            "play_time",
            "score",
            "skill_points",
            "weapon_deaths",
            "weapon_fire_count",
            "weapon_hit_count",
            "weapon_play_time",
            "weapon_score"
          ]
        }
      },
      "statNameParam_characters_stat_by_faction": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_stat_by_faction` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "domination_count",
            "facility_capture_count",
            "killed_by",
            "kills",
            "revenge_count",
            "weapon_damage_given",
            "weapon_damage_taken_by",
            "weapon_headshots",
            "weapon_killed_by",
            "weapon_kills",
            "weapon_vehicle_kills"
          ]
        }
      },
      "statNameParam_characters_stat_history": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_stat_history` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "battle_rank",
            "certs",
            "deaths",
            "facility_capture",
            "facility_defend",
            "kills",
            "medals",
            "ribbons",
            "score",
            "time"
          ]
        }
      },
      "statNameParam_characters_weapon_stat": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_weapon_stat` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "weapon_deaths",
            "weapon_fire_count",
            "weapon_hit_count",
            "weapon_play_time",
            "weapon_score"
          ]
        }
      },
      "statNameParam_characters_weapon_stat_by_faction": {
        "name": "stat_name",
        "in": "query",
        "description": "Name of a statistic for the `characters_weapon_stat_by_faction` collection.",
        "schema": {
          "type": "string",
          "enum": [
            "weapon_damage_given",
            "weapon_damage_taken_by",
            "weapon_headshots",
            "weapon_killed_by",
            "weapon_kills",
            "weapon_vehicle_kills"
          ]
        }
      },
      "profileIdParam_character": {
        "name": "profile_id",
        "in": "query",
        "description": "Subset of identifiers from the `profile_id` collection. The values map onto the NC loadout IDs regardless of faction. 0: All time, 1: Infiltrator, 3: Light Assault, 4: Combat Medic, 5: Engineer, 6: MAX Unit.",
        "schema": {
          "type": "string",
          "enum": [
            "0",
            "1",
            "3",
            "4",
            "5",
            "6",
            "7"
          ]
        }
      },
      "vehicleIdParam": {
        "name": "vehicle_id",
        "in": "query",
        "description": "Unique identifier of a vehicle.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "weaponIdParam": {
        "name": "weapon_id",
        "in": "query",
        "description": "Unique identifier of a weapon.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "worldIdParam": {
        "name": "world_id",
        "in": "query",
        "description": "Unique identifier of a world.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      },
      "zoneIdParam": {
        "name": "zone_id",
        "in": "query",
        "description": "Unique identifier of a zone.",
        "schema": {
          "type": "string"
        },
        "x-cast-to": "int32"
      }
    },
    "schemas": {
      "datatype": {
        "type": "object",
        "properties": {
          "count": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "dynamic",
                  "?"
                ]
              }
            ],
            "description": "The number of entries in this colleciton. The values `?` and `dynamic` both signify an uncountable collection. Note that even though no count is displayed here, it may still be accessible via the `count/{game}/{collection}` endpoint."
          },
          "hidden": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string",
                "enum": [
                  "false"
                ]
              }
            ],
            "description": "Whether this table is hidden from the API. Always false-y. Note that this may either be an actual `false` value, or the string `\"false\"`."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the collection."
          },
          "resolve_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of resolvable names for the collection. These can be passed to the `c:resolve` query parameter to insert additional fields into the returned payload."
          }
        }
      },
      "character": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int64"
          },
          "name": {
            "type": "object",
            "description": "Name of the character. Use the `first_lower` field for faster case-insensitive searches without needing to set `c:case=false`.",
            "properties": {
              "first": {
                "type": "string"
              },
              "first_lower": {
                "type": "string"
              }
            }
          },
          "faction_id": {
            "type": "string",
            "description": "Faction of the character. For NSOs, this equals the value of NSOs. An NSOs currently or home faction is not exposed on the REST API, but can be determined via the `team_id` of some WebSocket payloads.",
            "x-reference-to": "faction.faction_id",
            "x-cast-to": "int32"
          },
          "head_id": {
            "type": "string",
            "description": "Identifier for the character's in-game model. Note that with gender change tokens, this is no longer guaranteed to be immutable across a character's career.",
            "x-cast-to": "int32"
          },
          "title_id": {
            "type": "string",
            "description": "Currently selected title of the character. Useful for playing long names of players, e.g. \"Snowblower Higby\". A title ID of `0` corresponds to a player having selected \"No Title\" in-game.",
            "x-reference-to": "title.title_id",
            "x-cast-to": "int32"
          },
          "times": {
            "type": "object",
            "description": "Sub-object providing login time and playtime information.",
            "properties": {
              "creation": {
                "type": "string",
                "description": "Character creation timestamp in UTC."
              },
              "creation_date": {
                "type": "string",
                "description": "Human-readable version of `creation`."
              },
              "last_save": {
                "type": "string",
                "description": "Last time the character info was updated. This generally corresponds to the last time the character logged off. For this reason, characters are generally not available on the API during their first play session."
              },
              "last_save_date": {
                "type": "string",
                "description": "Human-readable version of `last_save`."
              },
              "last_login": {
                "type": "string",
                "description": "Last time the character logged in. Together with `last_save`, this can be used to construct the duration of the last play session of the character."
              },
              "last_login_date": {
                "type": "string",
                "description": "Human-readable version of `last_login`."
              },
              "login_count": {
                "type": "string",
                "x-cast-to": "int32",
                "description": "Number of individual logins by the character."
              },
              "minutes_played": {
                "type": "string",
                "x-cast-to": "int32",
                "description": "Total playtime in minutes."
              }
            }
          },
          "certs": {
            "type": "object",
            "description": "Sub-object providing certification point information.",
            "properties": {
              "earned_points": {
                "type": "string",
                "description": "Certifications earned through experience gain.",
                "x-cast-to": "int32"
              },
              "gifted_points": {
                "type": "string",
                "description": "Certifications gifted through in-game events or refunds.",
                "x-cast-to": "int32"
              },
              "spent_points": {
                "type": "string",
                "description": "Certifications points spent on skills and implant bundles.",
                "x-cast-to": "int32"
              },
              "available_points": {
                "type": "string",
                "description": "Current certification point balance.",
                "x-cast-to": "int32"
              },
              "percent_to_next": {
                "type": "string",
                "description": "Progress to earning the next certification point (every 250 exp).",
                "x-cast-to": "float"
              }
            }
          },
          "battle_rank": {
            "type": "object",
            "description": "Sub-object providing battle rank information.",
            "properties": {
              "percent_to_next": {
                "type": "string",
                "description": "Progress to the next level-up.",
                "x-cast-to": "float"
              },
              "value": {
                "type": "string",
                "description": "Current battle rank. Note that due to the A.S.P. prestige system, this is no longer sufficient to express player level. Always check `prestige_level` as well."
              }
            }
          },
          "profile_id": {
            "type": "string",
            "description": "Class of the character when the last logged off. This value can generally only be one of the 24 infantry classes available in the legacy `ps2/profile` collection, though other values are possible due to bad data or deleted characters.",
            "x-cast-to": "int32",
            "x-reference-to": "profile_2.profile_id"
          },
          "daily_ribbon": {
            "type": "object",
            "description": "Sub-object for daily ribbon bonuses. Note that ribbon bonuses have been disabled, rendering this object useless. It is recommended to treat is as optional in client code in case it ever gets removed from the response object.",
            "properties": {
              "count": {
                "type": "string",
                "description": "Number of daily ribbon bonuses available for collection.",
                "x-cast-to": "int32"
              },
              "time": {
                "type": "string",
                "description": "Next time a daily ribbon bonus will be granted."
              },
              "date": {
                "type": "string",
                "description": "Human-readable version of `time`."
              }
            }
          },
          "prestige_level": {
            "type": "string",
            "description": "The A.S.P. rank of the character.",
            "x-cast-to": "int32"
          }
        }
      },
      "character_name": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int64"
          },
          "name": {
            "type": "object",
            "description": "Name of the character. Use the `first_lower` field for faster case-insensitive searches without needing to set `c:case=false`.",
            "properties": {
              "first": {
                "type": "string"
              },
              "first_lower": {
                "type": "string"
              }
            }
          }
        }
      },
      "characters_friend": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character for which the friends list is being returned.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "name": {
            "type": "string",
            "description": "Defunct. Always returns `null`."
          },
          "friend_list": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "character_id": {
                  "type": "string",
                  "description": "Character ID of the friend.",
                  "x-cast-to": "int64",
                  "x-reference-to": "character.character_id"
                },
                "last_login_time": {
                  "type": "string",
                  "description": "Last time the friend logged in."
                },
                "online": {
                  "type": "string",
                  "description": "Whether the friend is currently online. Offline players will return 0, otherwise the value will be the `world_id` of the `ps2/world` they are online on.",
                  "x-cast-to": "int32"
                }
              }
            }
          }
        }
      },
      "characters_item": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character side of the relationship.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "item_id": {
            "type": "string",
            "description": "Item side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          }
        }
      },
      "characters_online_status": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character for which the online status is being returned.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "online_status": {
            "type": "string",
            "description": "Whether the character is currently online. Offline players will return 0, otherwise the value will be the `world_id` of the `ps2/world` they are online on.",
            "x-cast-to": "int32"
          }
        }
      },
      "characters_stat": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character for which the stats are being returned.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "stat_name": {
            "type": "string",
            "description": "Name of the stat being returned."
          },
          "profile_id": {
            "type": "string",
            "description": "Class for which stats are being returne.",
            "x-cast-to": "int32",
            "x-reference-to": "profile_2.profile_id"
          },
          "value_forever": {
            "type": "string",
            "description": "All-time value of the stat.",
            "x-cast-to": "int32"
          },
          "value_monthly": {
            "type": "string",
            "description": "Value of the stat for the last 30 days.",
            "x-cast-to": "int32"
          },
          "value_weekly": {
            "type": "string",
            "description": "Value of the stat for the last 7 days.",
            "x-cast-to": "int32"
          },
          "value_daily": {
            "type": "string",
            "description": "Value of the stat for the last 24 hours.",
            "x-cast-to": "int32"
          },
          "value_one_life_max": {
            "type": "string",
            "description": "Highest value of the stat in a single life.",
            "x-cast-to": "int32"
          },
          "last_save": {
            "type": "string",
            "description": "Last time the stat was saved."
          },
          "last_save_date": {
            "type": "string",
            "description": "Human-readable version of `last_save`."
          }
        }
      },
      "characters_stat_by_faction": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character for which the stats are being returned.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "stat_name": {
            "type": "string",
            "description": "Name of the stat being returned."
          },
          "profile_id": {
            "type": "string",
            "description": "Class for which stats are being returne.",
            "x-cast-to": "int32",
            "x-reference-to": "profile_2.profile_id"
          },
          "value_forever_vs": {
            "type": "string",
            "description": "All-time value of the stat (VS).",
            "x-cast-to": "int32"
          },
          "value_forever_nc": {
            "type": "string",
            "description": "All-time value of the stat (NC).",
            "x-cast-to": "int32"
          },
          "value_forever_tr": {
            "type": "string",
            "description": "All-time value of the stat (TR).",
            "x-cast-to": "int32"
          },
          "value_monthly_vs": {
            "type": "string",
            "description": "Value of the stat for the last 30 days (VS).",
            "x-cast-to": "int32"
          },
          "value_monthly_nc": {
            "type": "string",
            "description": "Value of the stat for the last 30 days (NC).",
            "x-cast-to": "int32"
          },
          "value_monthly_tr": {
            "type": "string",
            "description": "Value of the stat for the last 30 days (TR).",
            "x-cast-to": "int32"
          },
          "value_weekly_vs": {
            "type": "string",
            "description": "Value of the stat for the last 7 days (VS).",
            "x-cast-to": "int32"
          },
          "value_weekly_nc": {
            "type": "string",
            "description": "Value of the stat for the last 7 days (NC).",
            "x-cast-to": "int32"
          },
          "value_weekly_tr": {
            "type": "string",
            "description": "Value of the stat for the last 7 days (TR).",
            "x-cast-to": "int32"
          },
          "value_daily_vs": {
            "type": "string",
            "description": "Value of the stat for the last 24 hours (VS).",
            "x-cast-to": "int32"
          },
          "value_daily_nc": {
            "type": "string",
            "description": "Value of the stat for the last 24 hours (NC).",
            "x-cast-to": "int32"
          },
          "value_daily_tr": {
            "type": "string",
            "description": "Value of the stat for the last 24 hours (TR).",
            "x-cast-to": "int32"
          },
          "value_one_life_max_vs": {
            "type": "string",
            "description": "Highest value of the stat in a single life (VS).",
            "x-cast-to": "int32"
          },
          "value_one_life_max_nc": {
            "type": "string",
            "description": "Highest value of the stat in a single life (NC).",
            "x-cast-to": "int32"
          },
          "value_one_life_max_tr": {
            "type": "string",
            "description": "Highest value of the stat in a single life (TR).",
            "x-cast-to": "int32"
          },
          "last_save": {
            "type": "string",
            "description": "Last time the stat was saved."
          },
          "last_save_date": {
            "type": "string",
            "description": "Human-readable version of `last_save`."
          }
        }
      },
      "characters_stat_history": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character for which the stats are being returned.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "stat_name": {
            "type": "string",
            "description": "Name of the stat being returned."
          },
          "all_time": {
            "type": "string",
            "description": "All-time value of the stat.",
            "x-cast-to": "int32"
          },
          "one_life_max": {
            "type": "string",
            "description": "Highest value of the stat in a single life.",
            "x-cast-to": "int32"
          },
          "day": {
            "type": "object",
            "properties": {
              "d01": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d02": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d03": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d04": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d05": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d06": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d07": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d08": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d09": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d10": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d11": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d12": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d13": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d14": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d15": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d16": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d17": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d18": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d19": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d20": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d21": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d22": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d23": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d24": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d25": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d26": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d27": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d28": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d29": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d30": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "d31": {
                "type": "string",
                "x-cast-to": "int32"
              }
            }
          },
          "month": {
            "type": "object",
            "properties": {
              "m01": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m02": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m03": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m04": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m05": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m06": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m07": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m08": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m09": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m10": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m11": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "m12": {
                "type": "string",
                "x-cast-to": "int32"
              }
            }
          },
          "week": {
            "type": "object",
            "properties": {
              "w01": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "w02": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "w03": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "w04": {
                "type": "string",
                "x-cast-to": "int32"
              },
              "w05": {
                "type": "string",
                "x-cast-to": "int32"
              }
            }
          },
          "last_save": {
            "type": "string",
            "description": "Last time the stat was saved."
          },
          "last_save_date": {
            "type": "string",
            "description": "Human-readable version of `last_save`."
          }
        }
      },
      "characters_weapon_stat": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "The ID of the character.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "stat_name": {
            "type": "string",
            "description": "The name of the stat being recorded.",
            "x-reference-to": "characters_stat.stat_name"
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "vehicle_id": {
            "type": "string",
            "description": "The ID of the vehicle.",
            "x-cast-to": "int32",
            "x-reference-to": "vehicle.vehicle_id"
          },
          "value": {
            "type": "string",
            "description": "The all-time value of the given stat.",
            "x-cast-to": "int32"
          },
          "last_save": {
            "type": "string",
            "description": "Last time the stat was saved."
          },
          "last_save_date": {
            "type": "string",
            "description": "Human-readable version of `last_save`."
          }
        }
      },
      "characters_weapon_stat_by_faction": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "The ID of the character.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "stat_name": {
            "type": "string",
            "description": "The name of the stat being recorded.",
            "x-reference-to": "characters_stat.stat_name"
          },
          "item_id": {
            "type": "string",
            "description": "The ID of the item.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "vehicle_id": {
            "type": "string",
            "description": "The ID of the vehicle.",
            "x-cast-to": "int32",
            "x-reference-to": "vehicle.vehicle_id"
          },
          "value_vs": {
            "type": "string",
            "description": "The all-time value of the given stat for the VS faction.",
            "x-cast-to": "int32"
          },
          "value_nc": {
            "type": "string",
            "description": "The all-time value of the given stat for the NC faction.",
            "x-cast-to": "int32"
          },
          "value_tr": {
            "type": "string",
            "description": "The all-time value of the given stat for the TR faction.",
            "x-cast-to": "int32"
          },
          "last_save": {
            "type": "string",
            "description": "Last time the stat was saved."
          },
          "last_save_date": {
            "type": "string",
            "description": "Human-readable version of `last_save`."
          }
        }
      },
      "characters_world": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "Character for which the world is being returned.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "world_id": {
            "type": "string",
            "description": "The `ps2/world` of the character.",
            "x-cast-to": "int32",
            "x-reference-to": "world.world_id"
          }
        }
      },
      "faction": {
        "type": "object",
        "properties": {
          "faction_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32"
          },
          "name": {
            "description": "Canonical name of the faction",
            "$ref": "#/components/schemas/localized_string"
          },
          "image_set_id": {
            "type": "string",
            "description": "The `ps2/image_set` of the faction.",
            "x-cast-to": "int32",
            "x-reference-to": "image_set.image_set_id"
          },
          "image_id": {
            "type": "string",
            "description": "The `ps2/image` of the faction.",
            "x-cast-to": "int32",
            "x-reference-to": "image.image_id"
          },
          "image_path": {
            "type": "string",
            "description": "Relative path to the default image of the faction."
          },
          "code_tag": {
            "type": "string",
            "description": "The unique tag of the faction, or `None` for common-pool nanite systems."
          },
          "user_selectable": {
            "type": "string",
            "description": "Whether this faction is playable or reserved for NPCs.",
            "x-cast-to": "bool"
          }
        }
      },
      "item": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "item_type_id": {
            "type": "string",
            "description": "The `ps2/item_type` of the item.",
            "x-cast-to": "int32",
            "x-reference-to": "item_type.item_type_id"
          },
          "item_category_id": {
            "type": "string",
            "description": "The `ps2/item_category` of the item.",
            "x-cast-to": "int32",
            "x-reference-to": "item_category.item_category_id"
          },
          "activatable_ability_id": {
            "type": "string",
            "description": "The active `ps2/ability` granted upon equipping this item, such as the Heavy Assault's Overshield or MAX abilities.",
            "x-cast-to": "int32",
            "x-reference-to": "ability.ability_id"
          },
          "passive_ability_id": {
            "type": "string",
            "description": "The passive `ps2/ability` granted upon equipping this item, such as a suppressor or scope.",
            "x-cast-to": "int32",
            "x-reference-to": "ability.ability_id"
          },
          "is_vehicle_weapon": {
            "type": "string",
            "description": "Whether this item is a vehicle weapon.",
            "x-cast-to": "bool"
          },
          "name": {
            "description": "Display name of the item.",
            "$ref": "#/components/schemas/localized_string"
          },
          "description": {
            "description": "Description of the item.",
            "$ref": "#/components/schemas/localized_string"
          },
          "faction_id": {
            "type": "string",
            "description": "The `ps2/faction` of the item. Items with a faction ID of 0 are common-pool and available to all factions.",
            "x-cast-to": "int32",
            "x-reference-to": "faction.faction_id"
          },
          "max_stack_size": {
            "type": "string",
            "description": "The maximum number of this item that can be held at once. Primarily used for consumables or carried explosives.",
            "x-cast-to": "int32"
          },
          "image_set_id": {
            "type": "string",
            "description": "The `ps2/image_set` of the item's display icon.",
            "x-cast-to": "int32",
            "x-reference-to": "image_set.image_set_id"
          },
          "image_id": {
            "type": "string",
            "description": "The `ps2/image` of the item's display icon.",
            "x-cast-to": "int32",
            "x-reference-to": "image.image_id"
          },
          "image_path": {
            "type": "string",
            "description": "Relative path to the default image of the item."
          },
          "skill_set_id": {
            "type": "string",
            "description": "The `ps2/skill_set` of the item. Remnant of the original certification menu, used to unlock the weapon in the certification skill tree and lock out purchasing of attachments for weapons the player has not unlocked yet.",
            "x-cast-to": "int32",
            "x-reference-to": "skill_set.skill_set_id"
          },
          "is_default_attachment": {
            "type": "string",
            "description": "If true, the item is auto-granted to the player, such as the default scope and ammo types.",
            "x-cast-to": "bool"
          }
        }
      },
      "item_attachment": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Host item the `attachment_item_id` can be attached to.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "attachment_item_id": {
            "type": "string",
            "description": "Item that can be attached to the `item_id`.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          }
        }
      },
      "item_category": {
        "type": "object",
        "properties": {
          "item_category_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32",
            "x-reference-to": "item_category.item_category_id"
          },
          "name": {
            "description": "Display name of the item category.",
            "$ref": "#/components/schemas/localized_string"
          }
        }
      },
      "item_profile": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Item side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "profile_id": {
            "type": "string",
            "description": "Profile side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "profile_2.profile_id"
          }
        }
      },
      "item_to_weapon": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Item side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "weapon_id": {
            "type": "string",
            "description": "Weapon side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "weapon.weapon_id"
          }
        }
      },
      "item_type": {
        "type": "object",
        "properties": {
          "item_type_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32",
            "x-reference-to": "item_type.item_type_id"
          },
          "name": {
            "type": "string",
            "description": "Display name of the item type."
          },
          "code": {
            "type": "string",
            "description": "Internal code of the item type."
          }
        }
      },
      "marketing_bundle": {
        "type": "object",
        "properties": {
          "marketing_bundle_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32",
            "x-reference-to": "marketing_bundle.marketing_bundle_id"
          },
          "name": {
            "description": "Display name of the marketing bundle.",
            "$ref": "#/components/schemas/localized_string"
          },
          "description": {
            "description": "Description of the marketing bundle.",
            "$ref": "#/components/schemas/localized_string"
          },
          "image_id": {
            "type": "string",
            "description": "The `ps2/image` of the marketing bundle's display icon.",
            "x-cast-to": "int32",
            "x-reference-to": "image.image_id"
          },
          "station_cash_price": {
            "type": "string",
            "description": "The price of the marketing bundle in Station Cash.",
            "x-cast-to": "int32"
          },
          "cert_price": {
            "type": "string",
            "description": "The price of the marketing bundle in Certification Points.",
            "x-cast-to": "int32"
          },
          "release_time": {
            "type": "string",
            "description": "The time the marketing bundle was released as a UTC timestamp.",
            "x-cast-to": "int32"
          }
        }
      },
      "marketing_bundle_item": {
        "type": "object",
        "properties": {
          "marketing_bundle_id": {
            "type": "string",
            "description": "Marketing bundle side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "marketing_bundle.marketing_bundle_id"
          },
          "item_id": {
            "type": "string",
            "description": "Item side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "quantity": {
            "type": "string",
            "description": "The quantity of the item in the marketing bundle.",
            "x-cast-to": "int32"
          },
          "release_time": {
            "type": "string",
            "description": "The time the marketing bundle was released as a UTC timestamp.",
            "x-cast-to": "int32"
          }
        }
      },
      "marketing_bundle_with_1_item": {
        "type": "object",
        "properties": {
          "marketing_bundle_id": {
            "type": "string",
            "description": "Marketing bundle side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "marketing_bundle_with_1_item.marketing_bundle_id"
          },
          "item_id": {
            "type": "string",
            "description": "Item side of the relationship.",
            "x-cast-to": "int32",
            "x-reference-to": "item.item_id"
          },
          "item_quantity": {
            "type": "string",
            "description": "The quantity of the item in the marketing bundle.",
            "x-cast-to": "int32"
          },
          "station_cash_price": {
            "type": "string",
            "description": "The price of the marketing bundle in Daybreak Cash (formerly Station Cash).",
            "x-cast-to": "int32"
          },
          "cert_price": {
            "type": "string",
            "description": "The price of the marketing bundle in Certification Points.",
            "x-cast-to": "int32"
          },
          "release_time": {
            "type": "string",
            "description": "The time the marketing bundle was released as a UTC timestamp.",
            "x-cast-to": "int32"
          }
        }
      },
      "leaderboard": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "The ID of the character.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "value": {
            "type": "string",
            "description": "The all-time value of the given statistic.",
            "x-cast-to": "int32"
          },
          "rank": {
            "type": "string",
            "description": "The rank of the character for the given statistic.",
            "x-cast-to": "int32"
          }
        }
      },
      "loadout": {
        "type": "object",
        "properties": {
          "loadout_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32"
          },
          "profile_id": {
            "type": "string",
            "description": "The `ps2/profile_2` matching this loadout.",
            "x-cast-to": "int32",
            "x-reference-to": "profile_2.profile_id"
          },
          "faction_id": {
            "type": "string",
            "description": "The `ps2/faction` of the loadout.",
            "x-cast-to": "int32",
            "x-reference-to": "faction.faction_id"
          }
        }
      },
      "outfit": {
        "type": "object",
        "properties": {
          "outfit_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int64"
          },
          "name": {
            "type": "string",
            "description": "Canonical name of the outfit."
          },
          "name_lower": {
            "type": "string",
            "description": "Lowercase version of `name`."
          },
          "alias": {
            "type": "string",
            "description": "The outfit's alias (aka. tag), or an empty string if the outfit has no alias."
          },
          "alias_lower": {
            "type": "string",
            "description": "Lowercase version of `alias`."
          },
          "time_created": {
            "type": "string",
            "description": "Time the outfit was created."
          },
          "time_creeated_date": {
            "type": "string",
            "description": "Human-readable version of `time_created`."
          },
          "leader_character_id": {
            "type": "string",
            "description": "The `ps2/character` of the outfit's leader.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "member_count": {
            "type": "string",
            "description": "Number of members in the outfit.",
            "x-cast-to": "int32"
          }
        }
      },
      "outfit_member": {
        "type": "object",
        "properties": {
          "outfit_id": {
            "type": "string",
            "description": "The `ps2/outfit` the character is a member of.",
            "x-cast-to": "int64",
            "x-reference-to": "outfit.outfit_id"
          },
          "character_id": {
            "type": "string",
            "description": "The `ps2/character` for this membership entry.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "member_since": {
            "type": "string",
            "description": "Time the character joined the outfit."
          },
          "member_since_date": {
            "type": "string",
            "description": "Human-readable version of `member_since`."
          },
          "rank": {
            "type": "string",
            "description": "Custom rank of the character in the outfit.",
            "x-cast-to": "int32"
          },
          "rank_ordinal": {
            "type": "string",
            "description": "Ordinal of the character's rank in the outfit. Lower values are higher ranks.",
            "x-cast-to": "int32"
          }
        }
      },
      "outfit_member_extended": {
        "type": "object",
        "properties": {
          "character_id": {
            "type": "string",
            "description": "The `ps2/character` for this membership entry.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "member_since": {
            "type": "string",
            "description": "Time the character joined the outfit."
          },
          "member_since_date": {
            "type": "string",
            "description": "Human-readable version of `member_since`."
          },
          "member_rank": {
            "type": "string",
            "description": "Custom rank of the character in the outfit.",
            "x-cast-to": "int32"
          },
          "member_rank_ordinal": {
            "type": "string",
            "description": "Ordinal of the character's rank in the outfit. Lower values are higher ranks.",
            "x-cast-to": "int32"
          },
          "outfit_id": {
            "type": "string",
            "description": "The `ps2/outfit` the character is a member of.",
            "x-cast-to": "int64",
            "x-reference-to": "outfit.outfit_id"
          },
          "name": {
            "type": "string",
            "description": "Canonical name of the outfit."
          },
          "name_lower": {
            "type": "string",
            "description": "Lowercase version of `name`."
          },
          "alias": {
            "type": "string",
            "description": "The outfit's alias (aka. tag), or an empty string if the outfit has no alias."
          },
          "alias_lower": {
            "type": "string",
            "description": "Lowercase version of `alias`."
          },
          "time_created": {
            "type": "string",
            "description": "Time the outfit was created."
          },
          "time_creeated_date": {
            "type": "string",
            "description": "Human-readable version of `time_created`."
          },
          "leader_character_id": {
            "type": "string",
            "description": "The `ps2/character` of the outfit's leader.",
            "x-cast-to": "int64",
            "x-reference-to": "character.character_id"
          },
          "member_count": {
            "type": "string",
            "description": "Number of members in the outfit.",
            "x-cast-to": "int32"
          }
        }
      },
      "outfit_rank": {
        "type": "object",
        "properties": {
          "outfit_id": {
            "type": "string",
            "description": "The `ps2/outfit` the rank belongs to.",
            "x-cast-to": "int64",
            "x-reference-to": "outfit.outfit_id"
          },
          "ordinal": {
            "type": "string",
            "description": "Ordinal of the rank. Lower values are higher ranks.",
            "x-cast-to": "int32"
          },
          "name": {
            "type": "string",
            "description": "Custom name of the rank."
          },
          "description": {
            "type": "string",
            "description": "Custom description of the rank."
          }
        }
      },
      "profile": {
        "type": "object",
        "properties": {
          "profile_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32"
          },
          "profile_type_id": {
            "type": "string",
            "description": "The type of the profile. There is no public `profile_type` collection, this is an internal ID.",
            "x-cast-to": "int32"
          },
          "profile_type_description": {
            "type": "string",
            "description": "Internal description for the associated `profile_type_id`."
          },
          "name": {
            "description": "Localized name of the profile",
            "$ref": "#/components/schemas/localized_string"
          },
          "description": {
            "description": "Localized description of the profile",
            "$ref": "#/components/schemas/localized_string"
          },
          "image_set_id": {
            "type": "string",
            "description": "The `ps2/image_set` of the profile.",
            "x-cast-to": "int32",
            "x-reference-to": "image_set.image_set_id"
          },
          "image_id": {
            "type": "string",
            "description": "The `ps2/image` of the profile.",
            "x-cast-to": "int32",
            "x-reference-to": "image.image_id"
          },
          "image_path": {
            "type": "string",
            "description": "Relative path to the default image of the profile."
          },
          "movement_speed": {
            "type": "string",
            "description": "The base movement speed of the profile.",
            "x-cast-to": "float"
          },
          "backpedal_speed_modifier": {
            "type": "string",
            "description": "The modifier applied to the movement speed when walking backwards.",
            "x-cast-to": "float"
          },
          "sprint_speed_modifier": {
            "type": "string",
            "description": "The modifier applied to the movement speed when sprinting.",
            "x-cast-to": "float"
          },
          "crouch_speed_modifier": {
            "type": "string",
            "description": "The modifier applied to the movement speed when crouching.",
            "x-cast-to": "float"
          }
        }
      },
      "profile_2": {
        "type": "object",
        "properties": {
          "profile_id": {
            "type": "string",
            "description": "Unique ID of the collection. Note that this is one of the few collections where the ID field is not `<collection>_id`.",
            "x-cast-to": "int32"
          },
          "description": {
            "type": "string",
            "description": "Internal description of this profile. Not localized or user-facing."
          }
        }
      },
      "weapon": {
        "type": "object",
        "properties": {
          "world_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32"
          },
          "weapon_group_id": {
            "type": "string",
            "description": "ID of the weapon's group. Weapons in the same group are treated as a single weapon despite having distinct items. Examples include upgradable pseudo-weapons such as the medic or engineer tool, or the Infiltrator's Recon dart gun.\n\nNote that not all weapons have weapon groups, and that most weapon groups have only one weapon in them. The presence of this field has no bearing on the weapon being grouped or not.",
            "x-cast-to": "int32"
          },
          "turn_modifier": {
            "type": "string",
            "description": "The modifier applied to the turn speed when the weapon is equipped.",
            "x-cast-to": "float"
          },
          "move_modifier": {
            "type": "string",
            "description": "The modifier applied to the movement speed when the weapon is equipped.",
            "x-cast-to": "float"
          },
          "sprint_recovery_ms": {
            "type": "string",
            "description": "Time after sprinting during which the cone-of-fire will retain its sprinting value before starting to recover.",
            "x-cast-to": "int32"
          },
          "equip_ms": {
            "type": "string",
            "description": "The time in milliseconds it takes to equip the weapon.",
            "x-cast-to": "int32"
          },
          "unequip_ms": {
            "type": "string",
            "description": "The time in milliseconds it takes to unequip the weapon.",
            "x-cast-to": "int32"
          },
          "to_iron_sights_ms": {
            "type": "string",
            "description": "Transition duration when entering aim-down-sights in milliseconds.",
            "x-cast-to": "int32"
          },
          "from_iron_sights_ms": {
            "type": "string",
            "description": "Transition duration when exiting aim-down-sights in milliseconds.",
            "x-cast-to": "int32"
          },
          "heat_capacity": {
            "type": "string",
            "description": "Total capacity for heat-based weapons. This is comparable to the magazine size of regular weapons.",
            "x-cast-to": "int32"
          },
          "heat_bleed_off_rate": {
            "type": "string",
            "description": "Rate at which heat is dissipated when not firing. Note that this value is represented as an integer on the API despite being a float internally.",
            "x-cast-to": "int32"
          },
          "heat_overheat_penalty_ms": {
            "type": "string",
            "description": "The time in milliseconds it takes for the weapon to start cooling down after overheating.",
            "x-cast-to": "int32"
          },
          "melee_detect_width": {
            "type": "string",
            "description": "On melee weapons, designates the width of the quick knife attack hitbox.",
            "x-cast-to": "int32"
          },
          "melee_detect_height": {
            "type": "string",
            "description": "On melee weapons, designates the height of the quick knife attack hitbox.",
            "x-cast-to": "int32"
          },
          "requires_ammo": {
            "type": "string",
            "description": "Whether equipping this weapon requires ammunition to be available. Used for grenades or the medic's shield regen device to prevent selection when out of ammo.",
            "x-cast-to": "boolean"
          },
          "use_cooldown_ms": {
            "type": "string",
            "description": "Time in milliseconds between uses of this weapon.",
            "x-cast-to": "int32"
          }
        }
      },
      "weapon_ammo_slot": {
        "type": "object",
        "properties": {
          "weapon_id": {
            "type": "string",
            "description": "ID of the weapon to which this ammo slot belongs.",
            "x-cast-to": "int32"
          },
          "weapon_slot_index": {
            "type": "string",
            "description": "Index of the slot in the weapon's ammo slot list.",
            "x-cast-to": "int32"
          },
          "clip_size": {
            "type": "string",
            "description": "The number of bullets in a single clip of this ammo slot.",
            "x-cast-to": "int32"
          },
          "capacity": {
            "type": "string",
            "description": "Reserve ammunition capacity of this ammo slot.",
            "x-cast-to": "int32"
          },
          "refill_ammo_rate": {
            "type": "string",
            "description": "Number of bullets refilled per ammo resupply tick.",
            "x-cast-to": "int32"
          },
          "refill_ammo_delay_ms": {
            "type": "string",
            "description": "If specified, applies an extra cooldown to the ammo resupply speed of the weapon slot.",
            "x-cast-to": "int32"
          }
        }
      },
      "weapon_datasheet": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "ID of the item to which this datasheet belongs.",
            "x-cast-to": "int32"
          },
          "direct_damage": {
            "type": "string",
            "description": "Unreliable! Please refer to the damage effect listed in `ps2/fire_mode_2.damage_direct_effect_id` instead.",
            "x-cast-to": "int32"
          },
          "indirect_damage": {
            "type": "string",
            "description": "Unreliable! Please refer to the damage effect listed in `ps2/fire_mode_2.damage_indirect_effect_id` instead.",
            "x-cast-to": "int32"
          },
          "damage": {
            "type": "string",
            "description": "Unreliable! Please use the values from `ps2/fire_mode_2` instead.",
            "x-cast-to": "int32"
          },
          "damage_min": {
            "type": "string",
            "description": "Unreliable! Please use the values from `ps2/fire_mode_2` instead.",
            "x-cast-to": "int32"
          },
          "damage_max": {
            "type": "string",
            "description": "Unreliable! Please use the values from `ps2/fire_mode_2` instead.",
            "x-cast-to": "int32"
          },
          "fire_cone": {
            "type": "string",
            "description": "Unreliable! Please refer to the player state group listed in `ps2/fire_mode_2.player_state_group_id` instead.",
            "x-cast-to": "int32"
          },
          "fire_cone_min": {
            "type": "string",
            "description": "Unreliable! Please refer to the player state group listed in `ps2/fire_mode_2.player_state_group_id` instead.",
            "x-cast-to": "int32"
          },
          "fire_cone_max": {
            "type": "string",
            "description": "Unreliable! Please refer to the `cof_` values in `ps2/fire_mode_2` instead.",
            "x-cast-to": "int32"
          },
          "fire_rate_ms": {
            "type": "string",
            "description": "Unreliable! Please use `ps2/fire_mode_2.fire_refire_ms` instead.",
            "x-cast-to": "int32"
          },
          "fire_rate_ms_min": {
            "type": "string",
            "description": "Unreliable! Please use `ps2/fire_mode_2.fire_refire_ms` instead.",
            "x-cast-to": "int32"
          },
          "fire_rate_ms_max": {
            "type": "string",
            "description": "Unreliable! Please use `ps2/fire_mode_2.fire_refire_ms` instead.",
            "x-cast-to": "int32"
          },
          "reload_ms": {
            "type": "string",
            "description": "Unreliable! Please add the values of `ps2/fire_mode_2.reload_time_ms` instead.",
            "x-cast-to": "int32"
          },
          "reload_ms_min": {
            "type": "string",
            "description": "Unreliable! Please add the values of `ps2/fire_mode_2.reload_time_ms` instead.",
            "x-cast-to": "int32"
          },
          "reload_ms_max": {
            "type": "string",
            "description": "Unreliable! Please add the values of `ps2/fire_mode_2.reload_time_ms` and `ps2/fire_mode_2.reload_chamber_ms` together to get long reload time.",
            "x-cast-to": "int32"
          },
          "clip_size": {
            "type": "string",
            "description": "Unreliable! Please refer to the matching `ps2/weapon_ammo_slot` instead.",
            "x-cast-to": "int32"
          },
          "capacity": {
            "type": "string",
            "description": "Unreliable! Please refer to the matching `ps2/weapon_ammo_slot` instead.",
            "x-cast-to": "int32"
          },
          "range": {
            "description": "Localized name of the displayed range of the weapon.",
            "$ref": "#/components/schemas/localized_string"
          },
          "show_clip_size": {
            "type": "string",
            "description": "Whether the clip size should be displayed in the UI.",
            "x-cast-to": "boolean"
          },
          "show_fire_modes": {
            "type": "string",
            "description": "Whether the fire modes (in-game interpretation of this term) should be displayed in the UI.",
            "x-cast-to": "boolean"
          },
          "show_range": {
            "type": "string",
            "description": "Whether the range string should be displayed in the UI.",
            "x-cast-to": "boolean"
          }
        }
      },
      "world": {
        "type": "object",
        "properties": {
          "world_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32"
          },
          "state": {
            "type": "string",
            "enum": [
              "online",
              "locked"
            ],
            "description": "Current availability of the game server."
          },
          "name": {
            "description": "Localized name of the world",
            "$ref": "#/components/schemas/localized_string"
          },
          "description": {
            "description": "Localized description set for some worlds. Unused for most.",
            "$ref": "#/components/schemas/localized_string"
          }
        }
      },
      "zone": {
        "type": "object",
        "properties": {
          "zone_id": {
            "type": "string",
            "description": "Unique ID of the collection.",
            "x-cast-to": "int32"
          },
          "code": {
            "type": "string",
            "description": "Internal code of the zone. Used to connect map textures to the zone."
          },
          "hex_size": {
            "type": "string",
            "description": "Radius of a map hex in metres.",
            "x-cast-to": "float"
          },
          "name": {
            "description": "Localized name of the zone",
            "$ref": "#/components/schemas/localized_string"
          },
          "description": {
            "description": "Localized description of the zone",
            "$ref": "#/components/schemas/localized_string"
          },
          "geometry_id": {
            "type": "string",
            "description": "Internal geometry ID of the zones with dynamic IDs. Prior to this field being added, this ID was referred to as `definition_id` by community developers.",
            "x-cast-to": "int32"
          },
          "dynamic": {
            "type": "string",
            "description": "Whether this zone is dynamic or not. Multiple dynamic zones of the same `geometry_id` may exist for a given `ps2/world`, such as Sanctuary instances or Outfit Wars rooms.",
            "x-cast-to": "bool"
          }
        }
      },
      "localized_string": {
        "type": "object",
        "properties": {
          "de": {
            "type": "string",
            "description": "German locale"
          },
          "en": {
            "type": "string",
            "description": "English locale"
          },
          "es": {
            "type": "string",
            "description": "Spanish locale"
          },
          "fr": {
            "type": "string",
            "description": "French locale"
          },
          "it": {
            "type": "string",
            "description": "Italian locale"
          },
          "tr": {
            "type": "string",
            "description": "Turkish locale, unfinished and not available for most fields"
          }
        }
      }
    },
    "examples": {
      "character_higby": {
        "summary": "Higby",
        "value": {
          "character_list": [
            {
              "character_id": "5428010618015189601",
              "name": {
                "first": "Higby",
                "first_lower": "higby"
              },
              "faction_id": "2",
              "head_id": "1",
              "title_id": "100",
              "times": {
                "creation": "1353427357",
                "creation_date": "2012-11-20 16:02:37.0",
                "last_save": "1669323771",
                "last_save_date": "2022-11-24 21:02:51.0",
                "last_login": "1669320455",
                "last_login_date": "2022-11-24 20:07:35.0",
                "login_count": "1738",
                "minutes_played": "75517"
              },
              "certs": {
                "earned_points": "214706",
                "gifted_points": "78844",
                "spent_points": "257491",
                "available_points": "36059",
                "percent_to_next": "0.1721388888362"
              },
              "battle_rank": {
                "percent_to_next": "2",
                "value": "101"
              },
              "profile_id": "4",
              "daily_ribbon": {
                "count": "0",
                "time": "1669248000",
                "date": "2022-11-24 00:00:00.0"
              },
              "prestige_level": "0"
            }
          ],
          "returned": 1
        }
      },
      "character_name_higby": {
        "summary": "Higby",
        "value": {
          "character_list": [
            {
              "character_id": "5428010618015189601",
              "name": {
                "first": "Higby",
                "first_lower": "higby"
              }
            }
          ],
          "returned": 1
        }
      },
      "characters_friend": {
        "summary": "Higby",
        "description": "Only the first 3 friends are shown for brevity.",
        "value": {
          "characters_friend_list": [
            {
              "character_id": "5428010618015189601",
              "name": null,
              "friend_list": [
                {
                  "character_id": "5428010618014254785",
                  "last_login_time": "1679721693",
                  "online": "0"
                },
                {
                  "character_id": "5428010618014429969",
                  "last_login_time": "1658899596",
                  "online": "0"
                },
                {
                  "character_id": "5428010618015193969",
                  "last_login_time": "1679718619",
                  "online": "0"
                }
              ]
            }
          ],
          "returned": 1
        }
      },
      "characters_item": {
        "summary": "Higby's items. Note that the list has been truncated to 5 items as it always returns the full list.\nhttps://census.daybreakgames.com/get/ps2/characters_item?character_id=5428010618015189601",
        "value": {
          "characters_item_list": [
            {
              "character_id": "5428010618015189601",
              "item_id": "1"
            },
            {
              "character_id": "5428010618015189601",
              "item_id": "7"
            },
            {
              "character_id": "5428010618015189601",
              "item_id": "13"
            },
            {
              "character_id": "5428010618015189601",
              "item_id": "19"
            },
            {
              "character_id": "5428010618015189601",
              "item_id": "23"
            }
          ],
          "returned": 2522
        }
      },
      "characters_leaderboard": {
        "summary": "Higby's leaderboard entry for all-time kills.\nhttps://census.daybreakgames.com/get/ps2/characters_leaderboard?character_id=5428010618015189601&name=Kills&period=Forever",
        "value": {
          "limit": 1,
          "characters_leaderboard_list": [
            {
              "character_id": "5428010618015189601",
              "value": "68754",
              "rank": "6583"
            }
          ],
          "returned": 1,
          "key": "Forever_Kills",
          "count": 10000
        }
      },
      "characters_online_status": {
        "summary": "Higby",
        "value": {
          "characters_online_status_list": [
            {
              "character_id": "5428010618015189601",
              "online_status": "0"
            }
          ],
          "returned": 1
        }
      },
      "characters_world": {
        "summary": "Higby",
        "value": {
          "characters_world_list": [
            {
              "character_id": "5428010618015189601",
              "world_id": "1"
            }
          ],
          "returned": 1
        }
      },
      "characters_stat": {
        "summary": "Character Statistics",
        "description": "Shows the playtime for Combat Medic.\nhttps://census.daybreakgames.com/get/ps2/characters_stat?character_id=5428010618015189601&stat_name=play_time&profile_id=4",
        "value": {
          "characters_stat_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "play_time",
              "profile_id": "4",
              "value_forever": "4947689",
              "value_monthly": "41461",
              "value_weekly": "13599",
              "value_daily": "197",
              "value_one_life_max": "10459",
              "last_save": "1684499211",
              "last_save_date": "2023-05-19 12:26:50.711936"
            }
          ],
          "returned": 1
        }
      },
      "characters_stat_by_faction": {
        "summary": "Character Statistics by Faction",
        "description": "Shows the kills of an NC character. Note that no NC kills are listed, which is doubtful.\nhttps://census.daybreakgames.com/get/ps2/characters_stat_by_faction?character_id=5428010618015189601&stat_name=kills",
        "value": {
          "characters_stat_by_faction_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "kills",
              "profile_id": "1",
              "value_forever_vs": "3026",
              "value_forever_nc": "3356",
              "value_forever_tr": "2551",
              "value_monthly_vs": "3",
              "value_monthly_nc": "0",
              "value_monthly_tr": "8",
              "value_weekly_vs": "1",
              "value_weekly_nc": "0",
              "value_weekly_tr": "3",
              "value_daily_vs": "0",
              "value_daily_nc": "0",
              "value_daily_tr": "1",
              "value_one_life_max_vs": "7",
              "value_one_life_max_nc": "9",
              "value_one_life_max_tr": "6",
              "last_save": "1669295387",
              "last_save_date": "2022-11-24 13:09:46.730053"
            }
          ],
          "returned": 1
        }
      },
      "characters_stat_history": {
        "summary": "Historical Statistics",
        "description": "Historical kills of an NC character.\nhttps://census.daybreakgames.com/get/ps2/characters_stat_history?character_id=5428010618015189601&stat_name=kills",
        "value": {
          "characters_stat_history_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "kills",
              "all_time": "68754",
              "one_life_max": "185",
              "day": {
                "d01": "26",
                "d02": "0",
                "d03": "0",
                "d04": "5",
                "d05": "20",
                "d06": "51",
                "d07": "0",
                "d08": "0",
                "d09": "0",
                "d10": "0",
                "d11": "0",
                "d12": "0",
                "d13": "0",
                "d14": "0",
                "d15": "0",
                "d16": "0",
                "d17": "0",
                "d18": "0",
                "d19": "0",
                "d20": "0",
                "d21": "0",
                "d22": "0",
                "d23": "0",
                "d24": "0",
                "d25": "0",
                "d26": "0",
                "d27": "0",
                "d28": "0",
                "d29": "0",
                "d30": "0",
                "d31": "0"
              },
              "month": {
                "m01": "102",
                "m02": "0",
                "m03": "0",
                "m04": "0",
                "m05": "0",
                "m06": "0",
                "m07": "0",
                "m08": "0",
                "m09": "0",
                "m10": "0",
                "m11": "0",
                "m12": "0"
              },
              "week": {
                "w01": "51",
                "w02": "51",
                "w03": "0",
                "w04": "0",
                "w05": "0",
                "w06": "0",
                "w07": "0",
                "w08": "0",
                "w09": "0",
                "w10": "0",
                "w11": "0",
                "w12": "0",
                "w13": "0"
              },
              "last_save": "1669295387",
              "last_save_date": "2022-11-24 13:09:47.032"
            }
          ],
          "returned": 1
        }
      },
      "characters_weapon_stat_infantry_weapon": {
        "summary": "Infantry Weapon Statistics",
        "description": "Hit count of the NC1 Gauss Rifle of an NC character.\nhttps://census.daybreakgames.com/get/ps2/characters_weapon_stat?character_id=5428010618015189601&stat_name=weapon_hit_count&item_id=4",
        "value": {
          "characters_weapon_stat_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "weapon_hit_count",
              "item_id": "4",
              "vehicle_id": "0",
              "value": "11446",
              "last_save": "1394703677",
              "last_save_date": "2014-03-13 09:41:17.0"
            }
          ],
          "returned": 1
        }
      },
      "characters_weapon_stat_vehicle": {
        "summary": "Vehicle Statistics",
        "description": "Death count of the Flash of an NC character.\nhttps://census.daybreakgames.com/get/ps2/characters_weapon_stat?character_id=5428010618015189601&item_id=0&vehicle_id=!0&stat_name=weapon_deaths&vehicle_id=1",
        "value": {
          "characters_weapon_stat_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "weapon_deaths",
              "item_id": "0",
              "vehicle_id": "1",
              "value": "16",
              "last_save": "1448994374",
              "last_save_date": "2015-12-01 18:26:14.0"
            }
          ],
          "returned": 1
        }
      },
      "characters_weapon_stat_by_faction_infantry_weapon": {
        "summary": "Infantry Weapon Statistics",
        "description": "Hit count of the NC1 Gauss Rifle of an NC character.\nhttps://census.daybreakgames.com/get/ps2/characters_weapon_stat_by_faction?character_id=5428010618015189601&stat_name=weapon_headshots&vehicle_id=0&item_id=4",
        "value": {
          "characters_weapon_stat_by_faction_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "weapon_headshots",
              "item_id": "4",
              "vehicle_id": "0",
              "value_vs": "94",
              "value_nc": "0",
              "value_tr": "149",
              "last_save": "1394669799",
              "last_save_date": "2014-03-13 00:16:39.0"
            }
          ],
          "returned": 1
        }
      },
      "characters_weapon_stat_by_faction_vehicle": {
        "summary": "Vehicle Statistics",
        "description": "Total vehicle kills for a Vanguard, any weapon.\nhttps://census.daybreakgames.com/get/ps2/characters_weapon_stat_by_faction?character_id=5428010618015189601&stat_name=weapon_vehicle_kills&vehicle_id=5&item_id=0",
        "value": {
          "characters_weapon_stat_by_faction_list": [
            {
              "character_id": "5428010618015189601",
              "stat_name": "weapon_vehicle_kills",
              "item_id": "0",
              "vehicle_id": "5",
              "value_vs": "5",
              "value_nc": "0",
              "value_tr": "5",
              "last_save": "1571838169",
              "last_save_date": "2019-10-23 13:42:49.0"
            }
          ],
          "returned": 1
        }
      },
      "collection_characterInfo": {
        "summary": "Character Info",
        "description": "Shows basic character information while hiding unwanted fields.\nhttps://census.daybreakgames.com/get/ps2/character?c:show=name.first,faction_id,battle_rank.value,prestige_level",
        "value": {
          "character_list": [
            {
              "name": {
                "first": "360Xvortex"
              },
              "faction_id": "3",
              "battle_rank": {
                "value": "1"
              },
              "prestige_level": "0"
            }
          ],
          "returned": 1
        }
      },
      "collection_factionTags": {
        "summary": "Faction tags",
        "description": "Uses `c:distinct` to get all faction tags.\nhttps://census.daybreakgames.com/get/ps2/faction?c:distinct=code_tag",
        "value": {
          "count": 5,
          "faction_list": [
            {
              "code_tag": [
                "NC",
                "None",
                "NSO",
                "TR",
                "VS"
              ]
            }
          ],
          "returned": 1
        }
      },
      "collection_mapFacilities": {
        "summary": "Map state with facility names",
        "description": "Example using nested key access to insert data into the middle of a payload. Note that only one record is shown for brevity, the provided link returns the entire zone's region list.\nhttps://census.daybreakgames.com/get/ps2/map?world_id=1&zone_ids=2&c:join=map_region%5Einject_at:map_region%5Eon:Regions.Row.RowData.RegionId%5Eto:map_region_id",
        "value": {
          "map_list": [
            {
              "ZoneId": "2",
              "Regions": {
                "IsList": "1",
                "Row": [
                  {
                    "RowData": {
                      "RegionId": "2101",
                      "FactionId": "3",
                      "map_region": {
                        "map_region_id": "2101",
                        "zone_id": "2",
                        "facility_id": "7500",
                        "facility_name": "Hvar",
                        "facility_type_id": "4",
                        "facility_type": "Tech Plant",
                        "location_x": "-656.0273",
                        "location_y": "491.7669",
                        "location_z": "-2444.069",
                        "reward_amount": "1",
                        "reward_currency_id": "1000"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "returned": 1
        }
      },
      "count_success": {
        "summary": "Success",
        "value": {
          "count": 14
        }
      },
      "count_error": {
        "summary": "Error",
        "value": {
          "count": -1
        }
      },
      "datatype_character": {
        "summary": "Character",
        "value": {
          "datatype_list": {
            "name": "character",
            "hidden": false,
            "count": 15095335,
            "resolve_list": [
              "item",
              "item_full",
              "profile",
              "faction",
              "stat",
              "stat_by_faction",
              "weapon_stat",
              "weapon_stat_by_faction",
              "stat_history",
              "online_status",
              "friends",
              "world",
              "outfit",
              "outfit_member",
              "outfit_member_extended",
              "currency"
            ]
          },
          "returned": 1
        }
      },
      "datatype_outfitMember": {
        "summary": "Outfit Member",
        "value": {
          "datatype_list": {
            "name": "outfit_member",
            "hidden": false,
            "count": "?",
            "resolve_list": [
              "character",
              "character_name",
              "characters_stat_history",
              "online_status",
              "outfit"
            ]
          },
          "returned": 1
        }
      },
      "datatype_characterOnlineStatus": {
        "summary": "Character Online Status",
        "value": {
          "datatype_list": {
            "count": "dynamic",
            "hidden": "false",
            "name": "characters_online_status",
            "resolve_list": []
          },
          "returned": 1
        }
      },
      "faction": {
        "summary": "TR",
        "value": {
          "faction_list": [
            {
              "faction_id": "3",
              "name": {
                "de": "Terranische Republik",
                "en": "Terran Republic",
                "es": "República Terran",
                "fr": "République Terrane",
                "it": "Repubblica Terrestre",
                "tr": "Terran Cumhuriyeti"
              },
              "image_set_id": "20",
              "image_id": "18",
              "image_path": "/files/ps2/images/static/18.png",
              "code_tag": "TR",
              "user_selectable": "1"
            }
          ],
          "returned": 1
        }
      },
      "item": {
        "summary": "NC1 Gauss Rifle",
        "value": {
          "item_list": [
            {
              "item_id": "4",
              "item_type_id": "26",
              "item_category_id": "7",
              "is_vehicle_weapon": "0",
              "name": {
                "de": "NC1 Gaußgewehr",
                "en": "NC1 Gauss Rifle",
                "es": "Rifle Gauss NC1",
                "fr": "Fusil Gauss NC1",
                "it": "Fucile Gauss NC1",
                "tr": "NC1 Gauss Tüfeği"
              },
              "description": {
                "de": "Das Standard-Gaußgewehr NC1 war die erste erfolgreiche Einführung der Gaußgewehr-Technologie in kleinen Waffen. Nur für NK.",
                "en": "The standard issue NC1 Gauss Rifle was the first successful implementation of coilgun technology in small arms. NC use only.",
                "es": "El rifle NC1 Gauss estándar representó la primera implementación de tecnología coilgun en armas pequeñas. Solo para NC",
                "fr": "Le fusil Gauss NC1 standard représente la première application réussie de la technologie de canon magnétique aux armes de petit calibre. NC uniquement.",
                "it": "Il fucile Gauss NC1 standard rappresenta la prima applicazione riuscita della tecnologia di accelerazione magnetica nelle armi di piccole dimensioni. Esclusivo NC.",
                "tr": "Standart üretim NC1 Gauss Tüfeği, bobinsilahı teknolojisininin hafif silahlara ilk başarılı uygulanmasıdır. Yalnızca Yeni Birleşim kullanımı için."
              },
              "faction_id": "2",
              "max_stack_size": "1",
              "image_set_id": "2745",
              "image_id": "5310",
              "image_path": "/files/ps2/images/static/5310.png",
              "skill_set_id": "132",
              "is_default_attachment": "0"
            }
          ],
          "returned": 1
        }
      },
      "item_attachment": {
        "summary": "10 Attachments for the NC1 Gauss Rifle\nhttps://census.daybreakgames.com/get/ps2/item_attachment?item_id=4&c:limit=10",
        "value": {
          "item_attachment_list": [
            {
              "item_id": "4",
              "attachment_item_id": "34"
            },
            {
              "item_id": "4",
              "attachment_item_id": "74"
            },
            {
              "item_id": "4",
              "attachment_item_id": "115"
            },
            {
              "item_id": "4",
              "attachment_item_id": "148"
            },
            {
              "item_id": "4",
              "attachment_item_id": "149"
            },
            {
              "item_id": "4",
              "attachment_item_id": "150"
            },
            {
              "item_id": "4",
              "attachment_item_id": "151"
            },
            {
              "item_id": "4",
              "attachment_item_id": "558"
            },
            {
              "item_id": "4",
              "attachment_item_id": "796"
            },
            {
              "item_id": "4",
              "attachment_item_id": "799"
            }
          ],
          "returned": 10
        }
      },
      "item_category": {
        "summary": "Assault Rifles",
        "value": {
          "item_category_list": [
            {
              "item_category_id": "7",
              "name": {
                "de": "Sturmgewehr",
                "en": "Assault Rifle",
                "es": "Rifle de asalto",
                "fr": "Fusil d'assaut",
                "it": "Fucile d'assalto",
                "tr": "Taarruz Tüfeği"
              }
            }
          ],
          "returned": 1
        }
      },
      "item_profile": {
        "summary": "Classes that can use the default NC pistol.\nhttps://census.daybreakgames.com/get/ps2/item_profile?item_id=1&c:limit=10",
        "value": {
          "item_profile_list": [
            {
              "item_id": "1",
              "profile_id": "2"
            },
            {
              "item_id": "1",
              "profile_id": "4"
            },
            {
              "item_id": "1",
              "profile_id": "5"
            },
            {
              "item_id": "1",
              "profile_id": "6"
            },
            {
              "item_id": "1",
              "profile_id": "7"
            }
          ],
          "returned": 5
        }
      },
      "item_to_weapon": {
        "summary": "Connects the Beamer VS3 to its weapon object.\ncensus.daybreakgames.com/get/ps2/item_to_weapon?item_id=21",
        "value": {
          "item_to_weapon_list": [
            {
              "item_id": "21",
              "weapon_id": "13"
            }
          ],
          "returned": 1
        }
      },
      "item_type": {
        "summary": "A selection of common item types.\nhttps://census.daybreakgames.com/get/ps2/item_type?item_type_id=26,27,38,39,48",
        "value": {
          "item_type_list": [
            {
              "item_type_id": "26",
              "name": "Weapon",
              "code": "Weapon"
            },
            {
              "item_type_id": "27",
              "name": "Attachment",
              "code": "Attachment"
            },
            {
              "item_type_id": "38",
              "name": "Vehicle Cosmetic",
              "code": "VehicleCosmetic"
            },
            {
              "item_type_id": "39",
              "name": "Infantry Cosmetic",
              "code": "InfantryCosmetic"
            },
            {
              "item_type_id": "48",
              "name": "Construction Module",
              "code": "ConstructionModule"
            }
          ],
          "returned": 5
        }
      },
      "marketing_bundle": {
        "summary": "'PlanetSide Legacy Bundle (2022)'. Note the NULL value for the cert price as this is a DBC-only bundle.\nhttps://census.daybreakgames.com/get/ps2/marketing_bundle?marketing_bundle_id=812821&c:includeNull=1",
        "value": {
          "marketing_bundle_list": [
            {
              "marketing_bundle_id": "812821",
              "name": {
                "de": "PlanetSide-Legacy-Paket (2022)",
                "en": "PlanetSide Legacy Bundle (2022)",
                "es": "Lote de legado de Planetside (2022)",
                "fr": "Ensemble \"Héritage de PlanetSide\"(2022)",
                "it": "Pacchetto Legacy PlanetSide (2022)",
                "tr": "NULL"
              },
              "description": {
                "de": "Feiere die Geschichte der PlanetSide-Serie! Dieses Paket beinhaltet kosmetische Gegenstände für alle Fraktionen und Waffen für VS, NK und TR. Der Heldenbooster wird nur dem Charakter gewährt, der das Paket kauft. \"Perfekte\" Implantate sind für das komplette Konto verfügbar und können nicht zerlegt werden.",
                "en": "Celebrate the legacy of the PlanetSide franchise! This bundle contains cosmetics for all factions, and weapons for VS, NC, and TR. Heroic Boost is granted only to the character that purchases the bundle. \"Perfect\" Implants are granted account-wide, and cannot be broken down.",
                "es": "\"¡Celebra el legado de la serie PlanetSide! El lote contiene decoraciones para todas las facciones y armas para SV, NC y RT. El potenciador \nheroico solo está disponible para el personaje que compre el lote. Los implantes \"\"perfectos\"\" se conceden a toda la cuenta y no pueden desmontarse.\"",
                "fr": "Fêtez l'héritage de la franchise PlanetSide ! Cet ensemble contient des armes pour toutes les factions, et des éléments esthétiques pour la RT, le NC et la SV. Le Boost héroïque n'est fourni que pour le personnage qui achète le lot. Les implants de type \"Parfait\" sont disponibles pour l'ensemble du compte et ne peuvent être décomposés.",
                "it": "Celebra le origini del franchise di PlanetSide! Questo pacchetto contiene oggetti cosmetici per tutte le fazioni e armi per SV, NC e RT. Il potenziamento eroico può essere usato solo dal personaggio che ha acquistato il pacchetto. Gli impianti \"Perfect\" sono per tutto l'account e non si possono smontare.",
                "tr": "NULL"
              },
              "image_id": "807193",
              "station_cash_price": "0",
              "cert_price": "NULL",
              "release_time": "1683702000"
            }
          ],
          "returned": 1
        }
      },
      "marketing_bundle_item": {
        "summary": "Lists items contained in the 'PlanetSide Legacy Bundle (2022)'.\nhttps://census.daybreakgames.com/get/ps2/marketing_bundle_item?marketing_bundle_id=812821&c:limit=20",
        "value": {
          "marketing_bundle_item_list": [
            {
              "marketing_bundle_id": "812821",
              "item_id": "75432",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013508",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013533",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013480",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013477",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013476",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013586",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013587",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013588",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013589",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013590",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013592",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013593",
              "quantity": "1",
              "release_time": "1683702000"
            },
            {
              "marketing_bundle_id": "812821",
              "item_id": "6013594",
              "quantity": "1",
              "release_time": "1683702000"
            }
          ],
          "returned": 14
        }
      },
      "marketing_bundle_with_1_item": {
        "summary": "Comet VM2.\nhttps://census.daybreakgames.com/get/ps2/marketing_bundle_with_1_item?marketing_bundle_id=465",
        "value": {
          "marketing_bundle_with_1_item_list": [
            {
              "marketing_bundle_id": "465",
              "item_id": "17001",
              "item_quantity": "1",
              "station_cash_price": "100",
              "release_time": "1334041200"
            }
          ],
          "returned": 1
        }
      },
      "leaderboard": {
        "summary": "All-time kills on Cobalt.\nhttps://census.daybreakgames.com/get/ps2/leaderboard?name=Kills&period=Forever&world=13",
        "value": {
          "limit": 10,
          "leaderboard_list": [
            {
              "character_id": "5428011263289812449",
              "value": "1004944",
              "rank": "0"
            },
            {
              "character_id": "5428092148238898497",
              "value": "933727",
              "rank": "1"
            },
            {
              "character_id": "5428143250883637345",
              "value": "871442",
              "rank": "2"
            },
            {
              "character_id": "8252189355200955505",
              "value": "726831",
              "rank": "3"
            },
            {
              "character_id": "8280485721807277905",
              "value": "611044",
              "rank": "4"
            },
            {
              "character_id": "5428123302629266225",
              "value": "587284",
              "rank": "5"
            },
            {
              "character_id": "5428359100729973969",
              "value": "564648",
              "rank": "6"
            },
            {
              "character_id": "5428064957346113809",
              "value": "554749",
              "rank": "7"
            },
            {
              "character_id": "5428551667113611937",
              "value": "552295",
              "rank": "8"
            },
            {
              "character_id": "8261280742797131393",
              "value": "548013",
              "rank": "9"
            }
          ],
          "returned": 10,
          "key": "Forever_Kills",
          "count": 10000
        }
      },
      "loadout": {
        "summary": "NC Infiltrator",
        "value": {
          "loadout_list": [
            {
              "loadout_id": "1",
              "profile_id": "2",
              "faction_id": "2",
              "code_name": "NC Infiltrator"
            }
          ],
          "returned": 1
        }
      },
      "outfit": {
        "summary": "Friday Night Ops",
        "value": {
          "outfit_list": [
            {
              "outfit_id": "37525047953333155",
              "name": "Friday Night Ops",
              "name_lower": "friday night ops",
              "alias": "FNO",
              "alias_lower": "fno",
              "time_created": "1413001215",
              "time_created_date": "2014-10-11 04:20:15.0",
              "leader_character_id": "5428010618015197505",
              "member_count": "5"
            }
          ],
          "returned": 1
        }
      },
      "outfit_member": {
        "summary": "Luperza",
        "value": {
          "outfit_member_list": [
            {
              "outfit_id": "37525047953333155",
              "character_id": "5428010618015197505",
              "member_since": "1413001215",
              "member_since_date": "2014-10-11 04:20:15.0",
              "rank": "Leader",
              "rank_ordinal": "1"
            }
          ],
          "returned": 1
        }
      },
      "outfit_member_extended": {
        "summary": "Luperza",
        "value": {
          "outfit_member_extended_list": [
            {
              "character_id": "5428010618015197505",
              "member_since": "1413001215",
              "member_since_date": "2014-10-11 04:20:15.0",
              "member_rank": "Leader",
              "member_rank_ordinal": "1",
              "outfit_id": "37525047953333155",
              "name": "Friday Night Ops",
              "name_lower": "friday night ops",
              "alias": "FNO",
              "alias_lower": "fno",
              "time_created": "1413001215",
              "time_created_date": "2014-10-11 04:20:15.0",
              "leader_character_id": "5428010618015197505",
              "member_count": "5"
            }
          ],
          "returned": 1
        }
      },
      "outfit_rank": {
        "summary": "URGE Bastion Commander",
        "value": {
          "outfit_rank_list": [
            {
              "outfit_id": "37564049462661850",
              "ordinal": "5",
              "name": "BASTION COMMANDER",
              "description": "Outfit Enlisted"
            }
          ],
          "returned": 1
        }
      },
      "profile": {
        "summary": "TR Light Assault",
        "value": {
          "profile_list": [
            {
              "profile_id": "12",
              "profile_type_id": "3",
              "profile_type_description": "Light Assault",
              "faction_id": "3",
              "name": {
                "de": "Leichte Angriffseinheit",
                "en": "Light Assault",
                "es": "Asalto ligero",
                "fr": "Assaut léger",
                "it": "Assalto Leggero",
                "tr": "Hafif Taarruz"
              },
              "description": {
                "de": "Leichte Angriffseinheit",
                "en": "Light Assault",
                "es": "Asalto ligero",
                "fr": "Assaut léger",
                "it": "Assalto Leggero",
                "tr": "Hafif Taarruz"
              },
              "image_set_id": "8",
              "image_id": "62",
              "image_path": "/files/ps2/images/static/62.png",
              "movement_speed": "4",
              "backpedal_speed_modifier": "0.75",
              "sprint_speed_modifier": "1.625",
              "strafe_speed_modifier": "0.75"
            }
          ],
          "returned": 1
        }
      },
      "profile_2": {
        "summary": "Sunderer",
        "value": {
          "profile_2_list": [
            {
              "profile_id": "33",
              "description": "Sunderer"
            }
          ],
          "returned": 1
        }
      },
      "weapon_regular": {
        "summary": "NC1 Gauss Rifle.\nhttps://census.daybreakgames.com/get/ps2/weapon?weapon_id=4",
        "value": {
          "weapon_list": [
            {
              "weapon_id": "4",
              "weapon_group_id": "3",
              "turn_modifier": "1.0",
              "move_modifier": "1.0",
              "sprint_recovery_ms": "300",
              "equip_ms": "650",
              "unequip_ms": "250",
              "to_iron_sights_ms": "150",
              "from_iron_sights_ms": "150"
            }
          ],
          "returned": 1
        }
      },
      "weapon_knife": {
        "summary": "Auraxium Chainblade (Knife).\nhttps://census.daybreakgames.com/get/ps2/weapon?weapon_id=20",
        "value": {
          "weapon_list": [
            {
              "weapon_id": "20",
              "turn_modifier": "1.0",
              "move_modifier": "1.0",
              "sprint_recovery_ms": "0",
              "equip_ms": "250",
              "unequip_ms": "250",
              "to_iron_sights_ms": "150",
              "from_iron_sights_ms": "150",
              "melee_detect_width": "0.15",
              "melee_detect_height": "0.1"
            }
          ],
          "returned": 1
        }
      },
      "weapon_heat": {
        "summary": "Darkstar (Heat-based weapon).\nhttps://census.daybreakgames.com/get/ps2/weapon?weapon_id=111",
        "value": {
          "weapon_list": [
            {
              "weapon_id": "111",
              "weapon_group_id": "1226",
              "turn_modifier": "1.0",
              "move_modifier": "1.0",
              "sprint_recovery_ms": "300",
              "equip_ms": "750",
              "unequip_ms": "250",
              "to_iron_sights_ms": "150",
              "from_iron_sights_ms": "150",
              "heat_capacity": "999",
              "heat_bleed_off_rate": "364",
              "heat_overheat_penalty_ms": "1750"
            }
          ],
          "returned": 1
        }
      },
      "weapon_ammo_slot": {
        "summary": "Ammo Slots for the NC1 Gauss Rifle.\nhttps://census.daybreakgames.com/get/ps2/weapon_ammo_slot?weapon_id=4&c:limit=10",
        "value": {
          "weapon_ammo_slot_list": [
            {
              "weapon_id": "4",
              "weapon_slot_index": "0",
              "clip_size": "30",
              "capacity": "180",
              "refill_ammo_rate": "30"
            },
            {
              "weapon_id": "4",
              "weapon_slot_index": "1",
              "clip_size": "1",
              "capacity": "4",
              "refill_ammo_rate": "1"
            },
            {
              "weapon_id": "4",
              "weapon_slot_index": "2",
              "clip_size": "1",
              "capacity": "2",
              "refill_ammo_rate": "1",
              "refill_ammo_delay_ms": "5000"
            },
            {
              "weapon_id": "4",
              "weapon_slot_index": "3",
              "clip_size": "1",
              "capacity": "2",
              "refill_ammo_rate": "1",
              "refill_ammo_delay_ms": "5000"
            }
          ],
          "returned": 4
        }
      },
      "weapon_datasheet": {
        "summary": "Datasheet for the NS-11A. Note the incorrect damage values; none of which match the 143-to-125 damage model it has as of writing.\nhttps://census.daybreakgames.com/get/ps2/weapon_datasheet?item_id=70998",
        "value": {
          "weapon_datasheet_list": [
            {
              "item_id": "70998",
              "damage": "143",
              "damage_min": "75",
              "damage_max": "225",
              "fire_cone": "1.125",
              "fire_cone_min": "0",
              "fire_cone_max": "7",
              "fire_rate_ms": "92",
              "fire_rate_ms_min": "60",
              "fire_rate_mx_max": "135",
              "reload_ms": "2000",
              "reload_ms_min": "1250",
              "reload_ms_max": "3500",
              "clip_size": "35",
              "capacity": "210",
              "range": {
                "de": "Lang",
                "en": "Long",
                "es": "Largo",
                "fr": "Long",
                "it": "Lunga",
                "tr": "Uzun"
              },
              "show_clip_size": "1",
              "show_fire_modes": "1",
              "show_range": "1"
            }
          ],
          "returned": 1
        }
      },
      "world": {
        "summary": "Cobalt",
        "value": {
          "world_list": [
            {
              "world_id": "13",
              "state": "online",
              "name": {
                "en": "Cobalt",
                "de": "Cobalt",
                "es": "Cobalt",
                "fr": "Cobalt",
                "it": "Cobalt",
                "tr": "Cobalt"
              }
            }
          ],
          "returned": 1
        }
      },
      "zone": {
        "summary": "Oshur",
        "value": {
          "zone_list": [
            {
              "zone_id": "344",
              "code": "Oshur",
              "hex_size": "100",
              "name": {
                "de": "Oshur",
                "en": "Oshur",
                "es": "Oshur",
                "fr": "Oshur",
                "it": "Oshur"
              },
              "description": {
                "de": "Oshurs Strand-Archipel und das glitzernde blaue Wasser bieten die Möglichkeit für Einsätze zu Land, Luft und Wasser.",
                "en": "Oshur's sandy archipelago and sparkling blue waters provide opportunities for engagement by land, sea, and air.",
                "es": "El arenoso archipiélago de Oshur y sus resplandecientes aguas azules son el entorno ideal para luchar por tierra, mar y aire.",
                "fr": "L'archipel sablonneux d'Oshur et ses eaux bleues cristallines offrent des possibilités de combats terrestres, maritimes et aériens.",
                "it": "L'arcipelago sabbioso e le vivaci acque blu di Oshur forniscono ottime opportunità d'ingaggio via mare, terra e aria."
              },
              "geometry_id": "367",
              "dynamic": "0"
            }
          ],
          "returned": 1
        }
      }
    }
  }
}